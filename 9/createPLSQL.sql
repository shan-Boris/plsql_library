BEGIN

EXECUTE IMMEDIATE 'CREATE TABLE RATING (
        RATING NUMBER(3, 1) NOT NULL,
        STIMULATION VARCHAR2(100) DEFAULT NULL,
    CONSTRAINT RATING_PK PRIMARY KEY (RATING)
)'; -- содержит ограничени€/поощрени€



EXECUTE IMMEDIATE 'CREATE TABLE CLIENT (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        FIRST_NAME VARCHAR2(50) NOT NULL,
        LAST_NAME VARCHAR2(50) NOT NULL,
        FATHER_NAME VARCHAR2(50),
        BIRTHDAY DATE NOT NULL,
        EMPLOYEE VARCHAR2(50) DEFAULT NULL,
        RATING NUMBER(3, 1) NOT NULL,
    CONSTRAINT CLIENT_PK PRIMARY KEY (ID),
    CONSTRAINT FK_RATING_CLIENT FOREIGN KEY (RATING) REFERENCES RATING(RATING)
)'; -- содержит данные клиентов(фио, возраст, должность(если работник библиотеки), рейтинг(0 - черный список))

EXECUTE IMMEDIATE 'CREATE INDEX CLIENT_FIO_ID_IDX ON CLIENT(LAST_NAME, FIRST_NAME, ID)';


EXECUTE IMMEDIATE 'CREATE TABLE CARD_CHANGE_TIME (
        ID INTEGER,
        CREATE_CARD DATE NOT NULL,
        CHANGE_CARD DATE,
        DELETE_CARD DATE,
    CONSTRAINT CARD_CHANGE_TIME_PK PRIMARY KEY (ID)
)'; -- содержит врем€ создани€/изменени€/удалени€ читательского билета

EXECUTE IMMEDIATE 'CREATE TABLE PUBLISHER (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        PUBLISHER VARCHAR2(100) NOT NULL,
    CONSTRAINT PUBLISHER_PK PRIMARY KEY (ID)
)'; -- содержит название издательства

EXECUTE IMMEDIATE 'CREATE TABLE BOOK_TYPE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TYPE VARCHAR2(50) NOT NULL,
    CONSTRAINT BOOK_TYPE_PK PRIMARY KEY (ID)
)';-- содержит тип печатного материала

EXECUTE IMMEDIATE 'CREATE TABLE BOOK (
        ID INTEGER,
        TITLE VARCHAR2(300) NOT NULL,
        SUMMARY VARCHAR2(2000),
        YEAR_OF_PUBLICATION INTEGER,
        AGE_LIMIT INTEGER,
        PRICE NUMBER(8, 2),
        ID_PUBLISHER INTEGER,
        ID_BOOK_TYPE INTEGER,
    CONSTRAINT BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_PUBLISHER_BOOK FOREIGN KEY (ID_PUBLISHER) REFERENCES PUBLISHER(ID),
    CONSTRAINT FK_ID_BOOK_TYPE_BOOK FOREIGN KEY (ID_BOOK_TYPE) REFERENCES BOOK_TYPE(ID)
)';-- содержит данные печатных материалов

EXECUTE IMMEDIATE '
    CREATE SEQUENCE BOOK_ID_SEQ 
    INCREMENT BY 1 
    START WITH 1
    MAXVALUE 99999
    NOCACHE
    NOCYCLE';

EXECUTE IMMEDIATE 'CREATE INDEX BOOK_TITLE_ID_IDX ON BOOK(TITLE, ID)';

EXECUTE IMMEDIATE 'CREATE TABLE EXEMPLAR (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_BOOK INTEGER NOT NULL,
        SPECIFIC VARCHAR2(150),
        ON_HOME INTEGER DEFAULT 0,
        ON_STORE INTEGER DEFAULT 0,
        ON_READ_ROOM INTEGER DEFAULT 0,
    CONSTRAINT EXEMPLAR_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_EXEMPLAR FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID)
)';-- содержит экземпл€ры печатных материалов и их местонахождение

EXECUTE IMMEDIATE 'CREATE TABLE LOG_READING_ROOM (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_CLIENT INTEGER,
        ARRIVE DATE NOT NULL,
        LEAVING DATE,
        ID_EXEMPLAR INTEGER,
    CONSTRAINT LOG_READING_ROOM_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_READING_ROOM FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_READING_ROOM FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID)
)'; -- журнал посетителей читального зала

EXECUTE IMMEDIATE 'CREATE TABLE LOG_DELIVERY_RETURN_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TAKE_BOOK DATE NOT NULL,
        RETURN_BOOK DATE,
        RATING_BOOK NUMBER(3, 1),
        ID_CLIENT INTEGER,
        ID_EXEMPLAR INTEGER,
    CONSTRAINT LOG_DELIVERY_RETURN_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_DELIVERY_RETURN_BOOK FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_DELIVERY_RETURN_BOOK FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID)
)'; -- журнал приема/выдачи материалов, при возврате возможно выставление рейтинга материалу

EXECUTE IMMEDIATE 'CREATE TABLE LOG_ADD_DELETE_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_EXEMPLAR INTEGER,
        ID_CLIENT INTEGER,
        ID_PUBLISHER INTEGER,
        ENTERED DATE NOT NULL,
        LEAV DATE,
        NOTE VARCHAR2(300),
    CONSTRAINT LOG_ADD_DELETE_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID),
    CONSTRAINT FK_ID_PUBLISHER_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_PUBLISHER) REFERENCES PUBLISHER(ID)
)'; -- журнал приема/списани€ материала

EXECUTE IMMEDIATE 'CREATE TABLE TAG (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TAG VARCHAR2(50) NOT NULL,
    CONSTRAINT TAG_PK PRIMARY KEY (ID)
)'; -- содержит тэги


EXECUTE IMMEDIATE 'CREATE TABLE BOOK_HAVE_TAG (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_TAG INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT BOOK_HAVE_TAG_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_BOOK_HAVE_TAG FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_TAG_BOOK_HAVE_TAG FOREIGN KEY (ID_TAG) REFERENCES TAG(ID)
)';-- св€зь книга - тэг

EXECUTE IMMEDIATE 'CREATE TABLE AUTHOR (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        FIRST_NAME VARCHAR2(50) NOT NULL,
        LAST_NAME VARCHAR2(50) NOT NULL,
        FATHER_NAME VARCHAR2(50),
    CONSTRAINT AUTHOR_PK PRIMARY KEY (ID)
)'; -- содержит данные авторов

EXECUTE IMMEDIATE 'CREATE INDEX AUTHOR_FIO_ID_IDX ON AUTHOR(LAST_NAME, FIRST_NAME, ID)';


EXECUTE IMMEDIATE 'CREATE TABLE AUTHOR_WROTE_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_AUTHOR INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT AUTHOR_WROTE_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_AUTHOR_WROTE_BOOK FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_AUTHOR_AUTHOR_WROTE_BOOK FOREIGN KEY (ID_AUTHOR) REFERENCES AUTHOR(ID)
)'; -- св€зь автор - книга

EXECUTE IMMEDIATE 'CREATE TABLE GENRE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        GENRE VARCHAR2(350) NOT NULL,
    CONSTRAINT GENRE_PK PRIMARY KEY (ID)
)'; -- содержит жанры

EXECUTE IMMEDIATE 'CREATE TABLE BOOK_HAVE_GENRE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_GENRE INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT BOOK_HAVE_GENRE_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_BOOK_HAVE_GENRE FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_GENRE_BOOK_HAVE_GENRE FOREIGN KEY (ID_GENRE) REFERENCES GENRE(ID)
)'; -- св€зь книга - жанр

EXECUTE IMMEDIATE 'CREATE TABLE PREFERENCE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_GENRE INTEGER,
        ID_CLIENT INTEGER,
    CONSTRAINT PREFERENCE_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_PREFERENCE FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_GENRE_PREFERENCE FOREIGN KEY (ID_GENRE) REFERENCES GENRE(ID)
)'; -- содержит любимые жанры читател€

END;