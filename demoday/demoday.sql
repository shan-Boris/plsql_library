----------------------------------------
--            Ќј¬»√ј÷»я
-- создание таблиц с ограничени€ми - 12
-- создание пакетов - 194 (необходим функционал дл€ заполнени€ бд)
-- добавл€ем книги в бд - 1236
-- заполн€ем таблицу рейтингов, добавл€ем клиентов - 1806
-- заполн€ем журнал выдачи-возрата книг - 2026
-- сложные запросы - 2976
--вызов пакетных процедур и функций - 3253
-----------------------------------

-- создание таблиц с ограничени€ми
BEGIN

EXECUTE IMMEDIATE 'CREATE TABLE RATING (
        RATING NUMBER(3, 1) NOT NULL,
        STIMULATION VARCHAR2(100) DEFAULT NULL,
    CONSTRAINT RATING_PK PRIMARY KEY (RATING)
)'; -- содержит ограничени€/поощрени€



EXECUTE IMMEDIATE 'CREATE TABLE CLIENT (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        FIRST_NAME VARCHAR2(50) NOT NULL,
        LAST_NAME VARCHAR2(50) NOT NULL,
        FATHER_NAME VARCHAR2(50),
        BIRTHDAY DATE NOT NULL,
        EMPLOYEE VARCHAR2(50) DEFAULT NULL,
        RATING NUMBER(3, 1) NOT NULL,
    CONSTRAINT CLIENT_PK PRIMARY KEY (ID),
    CONSTRAINT FK_RATING_CLIENT FOREIGN KEY (RATING) REFERENCES RATING(RATING)
)'; -- содержит данные клиентов(фио, возраст, должность(если работник библиотеки), рейтинг(0 - черный список))

EXECUTE IMMEDIATE 'CREATE INDEX CLIENT_FIO_ID_IDX ON CLIENT(LAST_NAME, FIRST_NAME, ID)';


EXECUTE IMMEDIATE 'CREATE TABLE CARD_CHANGE_TIME (
        ID INTEGER,
        CREATE_CARD DATE NOT NULL,
        CHANGE_CARD DATE,
        DELETE_CARD DATE,
    CONSTRAINT CARD_CHANGE_TIME_PK PRIMARY KEY (ID)
)'; -- содержит врем€ создани€/изменени€/удалени€ читательского билета

EXECUTE IMMEDIATE 'CREATE TABLE PUBLISHER (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        PUBLISHER VARCHAR2(100) NOT NULL,
    CONSTRAINT PUBLISHER_PK PRIMARY KEY (ID)
)'; -- содержит название издательства

EXECUTE IMMEDIATE 'CREATE TABLE BOOK_TYPE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TYPE VARCHAR2(50) NOT NULL,
    CONSTRAINT BOOK_TYPE_PK PRIMARY KEY (ID)
)';-- содержит тип печатного материала

EXECUTE IMMEDIATE 'CREATE TABLE BOOK (
        ID INTEGER,
        TITLE VARCHAR2(300) NOT NULL,
        SUMMARY VARCHAR2(2000),
        YEAR_OF_PUBLICATION INTEGER,
        AGE_LIMIT INTEGER,
        PRICE NUMBER(8, 2),
        ID_PUBLISHER INTEGER,
        ID_BOOK_TYPE INTEGER,
    CONSTRAINT BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_PUBLISHER_BOOK FOREIGN KEY (ID_PUBLISHER) REFERENCES PUBLISHER(ID),
    CONSTRAINT FK_ID_BOOK_TYPE_BOOK FOREIGN KEY (ID_BOOK_TYPE) REFERENCES BOOK_TYPE(ID)
)';-- содержит данные печатных материалов

EXECUTE IMMEDIATE '
    CREATE SEQUENCE BOOK_ID_SEQ 
    INCREMENT BY 1 
    START WITH 1
    MAXVALUE 99999
    NOCACHE
    NOCYCLE'; -- последовательнось дл€ таблицы BOOK

EXECUTE IMMEDIATE 'CREATE INDEX BOOK_TITLE_ID_IDX ON BOOK(TITLE, ID)';

EXECUTE IMMEDIATE 'CREATE TABLE EXEMPLAR (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_BOOK INTEGER NOT NULL,
        SPECIFIC VARCHAR2(150),
        ON_HOME INTEGER DEFAULT 0,
        ON_STORE INTEGER DEFAULT 0,
        ON_READ_ROOM INTEGER DEFAULT 0,
    CONSTRAINT EXEMPLAR_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_EXEMPLAR FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID)
)';-- содержит экземпл€ры печатных материалов и их местонахождение

EXECUTE IMMEDIATE 'CREATE TABLE LOG_READING_ROOM (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_CLIENT INTEGER,
        ARRIVE DATE NOT NULL,
        LEAVING DATE,
        ID_EXEMPLAR INTEGER,
    CONSTRAINT LOG_READING_ROOM_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_READING_ROOM FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_READING_ROOM FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID)
)'; -- журнал посетителей читального зала

EXECUTE IMMEDIATE 'CREATE TABLE LOG_DELIVERY_RETURN_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TAKE_BOOK DATE NOT NULL,
        RETURN_BOOK DATE,
        RATING_BOOK NUMBER(3, 1),
        ID_CLIENT INTEGER,
        ID_EXEMPLAR INTEGER,
    CONSTRAINT LOG_DELIVERY_RETURN_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_DELIVERY_RETURN_BOOK FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_DELIVERY_RETURN_BOOK FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID)
)'; -- журнал приема/выдачи материалов, при возврате возможно выставление рейтинга материалу

EXECUTE IMMEDIATE 'CREATE TABLE LOG_ADD_DELETE_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_EXEMPLAR INTEGER,
        ID_CLIENT INTEGER,
        ID_PUBLISHER INTEGER,
        ENTERED DATE NOT NULL,
        LEAV DATE,
        NOTE VARCHAR2(300),
    CONSTRAINT LOG_ADD_DELETE_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_EXEMPLAR_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_EXEMPLAR) REFERENCES EXEMPLAR(ID),
    CONSTRAINT FK_ID_PUBLISHER_LOG_ADD_DELETE_BOOK FOREIGN KEY (ID_PUBLISHER) REFERENCES PUBLISHER(ID)
)'; -- журнал приема/списани€ материала

EXECUTE IMMEDIATE 'CREATE TABLE TAG (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        TAG VARCHAR2(50) NOT NULL,
    CONSTRAINT TAG_PK PRIMARY KEY (ID)
)'; -- содержит тэги


EXECUTE IMMEDIATE 'CREATE TABLE BOOK_HAVE_TAG (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_TAG INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT BOOK_HAVE_TAG_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_BOOK_HAVE_TAG FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_TAG_BOOK_HAVE_TAG FOREIGN KEY (ID_TAG) REFERENCES TAG(ID)
)';-- св€зь книга - тэг

EXECUTE IMMEDIATE 'CREATE TABLE AUTHOR (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        FIRST_NAME VARCHAR2(50) NOT NULL,
        LAST_NAME VARCHAR2(50) NOT NULL,
        FATHER_NAME VARCHAR2(50),
    CONSTRAINT AUTHOR_PK PRIMARY KEY (ID)
)'; -- содержит данные авторов

EXECUTE IMMEDIATE 'CREATE INDEX AUTHOR_FIO_ID_IDX ON AUTHOR(LAST_NAME, FIRST_NAME, ID)';


EXECUTE IMMEDIATE 'CREATE TABLE AUTHOR_WROTE_BOOK (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_AUTHOR INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT AUTHOR_WROTE_BOOK_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_AUTHOR_WROTE_BOOK FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_AUTHOR_AUTHOR_WROTE_BOOK FOREIGN KEY (ID_AUTHOR) REFERENCES AUTHOR(ID)
)'; -- св€зь автор - книга

EXECUTE IMMEDIATE 'CREATE TABLE GENRE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        GENRE VARCHAR2(350) NOT NULL,
    CONSTRAINT GENRE_PK PRIMARY KEY (ID)
)'; -- содержит жанры

EXECUTE IMMEDIATE 'CREATE TABLE BOOK_HAVE_GENRE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_GENRE INTEGER,
        ID_BOOK INTEGER,
    CONSTRAINT BOOK_HAVE_GENRE_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_BOOK_BOOK_HAVE_GENRE FOREIGN KEY (ID_BOOK) REFERENCES BOOK(ID),
    CONSTRAINT FK_ID_GENRE_BOOK_HAVE_GENRE FOREIGN KEY (ID_GENRE) REFERENCES GENRE(ID)
)'; -- св€зь книга - жанр

EXECUTE IMMEDIATE 'CREATE TABLE PREFERENCE (
        ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1),
        ID_GENRE INTEGER,
        ID_CLIENT INTEGER,
    CONSTRAINT PREFERENCE_PK PRIMARY KEY (ID),
    CONSTRAINT FK_ID_CLIENT_PREFERENCE FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT(ID),
    CONSTRAINT FK_ID_GENRE_PREFERENCE FOREIGN KEY (ID_GENRE) REFERENCES GENRE(ID)
)'; -- содержит любимые жанры читател€

END;
/


-- пакет дл€ работы с книгами
CREATE OR REPLACE PACKAGE book_pkg
IS
    TYPE a_first_name IS VARRAY (100) OF VARCHAR2(100);
    TYPE a_last_name IS VARRAY (100) OF VARCHAR2(100);
    TYPE a_father_name IS VARRAY (100) OF VARCHAR2(100);
    TYPE tag IS VARRAY (100) OF VARCHAR2(100);
    TYPE genre IS VARRAY (100) OF VARCHAR2(100);

-- добавление книги
    FUNCTION create_book (
        
        amount_books           IN NUMBER,
        issuer                 IN PUBLISHER.PUBLISHER%TYPE,
        title                  IN BOOK.TITLE%TYPE,
        summary                IN BOOK.SUMMARY%TYPE,
        year_of_publication    IN BOOK.YEAR_OF_PUBLICATION%TYPE,
        age_limit              IN BOOK.AGE_LIMIT%TYPE,
        price                  IN BOOK.PRICE%TYPE,
        book_type              IN BOOK_TYPE.TYPE%TYPE,
        a_first_names          IN a_first_name,
        a_last_names           IN a_last_name,
        a_father_names         IN a_father_name,
        tags                   IN tag,
        genres                 IN genre

    )
    RETURN NUMBER;

-- проверка отсутстви€ издательства в бд
    FUNCTION publisher_is_new(
        publ          IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER;

-- проверка отсутстви€ типа печатного материала в бд
    FUNCTION book_type_is_new(
        book_type       IN BOOK_TYPE.TYPE%TYPE
    )
    RETURN NUMBER;

-- проверка отсутстви€ автора в бд
    FUNCTION author_is_new(
        firstname          IN VARCHAR2,
        lastname           IN VARCHAR2,
        fathername         IN VARCHAR2
    )
    RETURN NUMBER;

-- проверка отсутстви€ тэга в бд
    FUNCTION tag_is_new(
        tag$          IN VARCHAR2
    )
    RETURN NUMBER;

-- проверка отсутстви€ жанра в бд
    FUNCTION genre_is_new(
        genre$          IN VARCHAR2
    )
    RETURN NUMBER;

-- проверка читател€ на возможность получени€ книги
    FUNCTION check_reader_for_book (
        client_id        IN  CLIENT.ID%TYPE,
        titleBook        IN  BOOK.TITLE%TYPE,
        issuere          IN  PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER;

-- найти свободный экземпл€р дл€ выдачи домой
    FUNCTION get_free_exemplar (
        title        IN  BOOK.TITLE%TYPE,
        issuer       IN  PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER;

-- выдача книги клиенту
    FUNCTION delivery_book (
        id_client          IN CLIENT.ID%TYPE,
        title              IN BOOK.TITLE%TYPE,
        issuer          IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER; 

-- выдать книгу если клиент прошел проверку на соответствие книге
    FUNCTION get_book (
        id_client$          IN CLIENT.ID%TYPE,
        title$              IN BOOK.TITLE%TYPE,
        issuer$             IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER;

-- найти экземпл€р, который вз€л клиент
    FUNCTION find_exemplar_of_client(
        title$                  IN BOOK.TITLE%TYPE, 
        publisher$              IN PUBLISHER.PUBLISHER%TYPE, 
        id_client$              IN CLIENT.ID%TYPE 
    )
    RETURN NUMBER;
-- вернуть книгу в библиотеку
    PROCEDURE return_book (
        id_client$          IN CLIENT.ID%TYPE,
        title$              IN BOOK.TITLE%TYPE,
        publisher$          IN PUBLISHER.PUBLISHER%TYPE,
        rate_from_client$   IN NUMBER
    );

END;
/

CREATE OR REPLACE PACKAGE BODY book_pkg
IS

    FUNCTION publisher_is_new(
        publ       IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER
    IS
        any_rows_found          NUMBER;
    BEGIN
        SELECT
            COUNT(*) INTO any_rows_found
        FROM
            PUBLISHER
        WHERE
            PUBLISHER = publ;
        IF any_rows_found = 0
            THEN RETURN 1;
            ELSE RETURN 0;
        END IF;
    END;

    FUNCTION book_type_is_new(
        book_type       IN BOOK_TYPE.TYPE%TYPE
    )
    RETURN NUMBER
    IS
        any_rows_found          NUMBER;
    BEGIN
        SELECT
            COUNT(*) INTO any_rows_found
        FROM
            BOOK_TYPE
        WHERE
            TYPE = book_type;
        IF any_rows_found = 0
            THEN RETURN 1;
            ELSE RETURN 0;
        END IF;
    END;

    FUNCTION author_is_new(
        firstname          IN VARCHAR2,
        lastname           IN VARCHAR2,
        fathername         IN VARCHAR2
    )
    RETURN NUMBER
    IS
        any_rows_found          NUMBER;
    BEGIN
        SELECT
            COUNT(*) INTO any_rows_found
        FROM
            AUTHOR
        WHERE
            FIRST_NAME = firstname AND LAST_NAME = lastname 
            AND FATHER_NAME = fathername;
        IF any_rows_found = 0
            THEN RETURN 1;
            ELSE RETURN 0;
        END IF;
    END;

    FUNCTION tag_is_new(
        tag$          IN VARCHAR2
    )
    RETURN NUMBER
    IS
        any_rows_found          NUMBER;
    BEGIN
        SELECT
            COUNT(*) INTO any_rows_found
        FROM
            TAG
        WHERE
            TAG = tag$;

        IF any_rows_found = 0
            THEN RETURN 1;
            ELSE RETURN 0;
        END IF;
    END;
    
    FUNCTION genre_is_new(
        genre$          IN VARCHAR2
    )
    RETURN NUMBER
    IS
        any_rows_found          NUMBER;
    BEGIN
        SELECT
            COUNT(*) INTO any_rows_found
        FROM
            GENRE
        WHERE
            GENRE = genre$;

        IF any_rows_found = 0
            THEN RETURN 1;
            ELSE RETURN 0;
        END IF;
    END;

    FUNCTION create_book (
        amount_books           IN NUMBER,
        issuer                 IN PUBLISHER.PUBLISHER%TYPE,
        title                  IN BOOK.TITLE%TYPE,
        summary                IN BOOK.SUMMARY%TYPE,
        year_of_publication    IN BOOK.YEAR_OF_PUBLICATION%TYPE,
        age_limit              IN BOOK.AGE_LIMIT%TYPE,
        price                  IN BOOK.PRICE%TYPE,
        book_type              IN BOOK_TYPE.TYPE%TYPE,
        a_first_names          IN a_first_name,
        a_last_names           IN a_last_name,
        a_father_names         IN a_father_name,
        tags                   IN tag,
        genres                 IN genre
        )
    RETURN NUMBER 
    IS
        exemplar_id             NUMBER;
        bookid                  NUMBER;
    BEGIN

-- добавл€ем издательство если его еще в базе нет
        IF publisher_is_new(issuer) = 1
            THEN 
                INSERT INTO PUBLISHER (
                    PUBLISHER
                ) VALUES (
                    issuer
                );
                COMMIT;
        END IF;

-- добавл€ем тип материала если его еще в базе нет
        IF book_type_is_new(book_type) = 1
            THEN 
                INSERT INTO BOOK_TYPE (
                    TYPE
                ) VALUES (
                    book_type
                );
                COMMIT;
        END IF;

-- получаем id дл€ книги
        bookid := BOOK_ID_SEQ.NEXTVAL;

-- добавл€ем книгу
        INSERT INTO BOOK (
            ID,
            TITLE,
            SUMMARY,
            YEAR_OF_PUBLICATION,
            AGE_LIMIT,
            PRICE,
            ID_PUBLISHER,
            ID_BOOK_TYPE
        ) VALUES (
            bookid,
            title,
            summary,
            year_of_publication,
            age_limit,
            price,
            (SELECT ID FROM PUBLISHER WHERE PUBLISHER = issuer),
            (SELECT ID FROM BOOK_TYPE WHERE TYPE = book_type)
        );
        COMMIT;
-- провер€ем авторов и если еще нет в базе то добавл€ем
        FOR I IN 1..a_first_names.COUNT LOOP
            IF author_is_new(a_first_names(I), a_last_names(I), a_father_names(I)) = 1
                THEN
                    INSERT INTO AUTHOR (
                        FIRST_NAME,
                        LAST_NAME,
                        FATHER_NAME
                    ) VALUES (
                        a_first_names(I),
                        a_last_names(I),
                        a_father_names(I)
                    );   
            END IF;

            -- добавл€ем св€зь автор - книга
            INSERT INTO AUTHOR_WROTE_BOOK(
                ID_AUTHOR,
                ID_BOOK
            ) VALUES (
                (SELECT 
                    ID 
                FROM AUTHOR 
                WHERE FIRST_NAME = a_first_names(I) AND LAST_NAME = a_last_names(I) 
                    AND FATHER_NAME = a_father_names(I)),
                bookid
            );
            COMMIT;
        END LOOP;

-- добавл€ем экземпл€ры книг на склад в библиотеку и заносим в журнал приема книг
        FOR I IN 1..amount_books LOOP
            INSERT INTO EXEMPLAR (
                ID_BOOK,
                ON_STORE
            ) VALUES (
                bookid,
                1
            )
            RETURNING ID INTO exemplar_id; 

            INSERT INTO LOG_ADD_DELETE_BOOK (
                ID_EXEMPLAR,
                ID_PUBLISHER,
                ENTERED
            ) VALUES (
                exemplar_id,
                ( SELECT ID FROM PUBLISHER WHERE PUBLISHER = issuer ),
                TO_DATE(SYSDATE, 'dd/mm/yyyy')
            );
            DBMS_OUTPUT.put_line (title || ' добавлена в библиотеку, экземпл€р є' || exemplar_id);

        END LOOP;

-- провер€ем тэги и если еще нет в базе то добавл€ем
        FOR I IN 1..tags.COUNT LOOP
            IF tag_is_new(tags(I)) = 1
                THEN
                    INSERT INTO TAG (
                        TAG
                    ) VALUES (
                        tags(I)
                    );  
            END IF;

-- добавл€ем св€зь тэг - книга
            INSERT INTO BOOK_HAVE_TAG(
                ID_TAG,
                ID_BOOK
            ) VALUES (
                (SELECT ID FROM TAG WHERE TAG = tags(I)),
                bookid
            );
        END LOOP;

-- провер€ем жанры и если еще нет в базе то добавл€ем
        FOR I IN 1..genres.COUNT LOOP
            IF genre_is_new(genres(I)) = 1
                THEN
                    INSERT INTO GENRE (
                        GENRE       
                    ) VALUES (
                        genres(I)
                    );  
            END IF;

-- добавл€ем св€зь жанр - книга
            INSERT INTO BOOK_HAVE_GENRE(
                ID_GENRE,
                ID_BOOK
            ) VALUES (
                (SELECT ID FROM GENRE WHERE GENRE = genres(I)),
                bookid
            );
        END LOOP;

        RETURN bookid;
    EXCEPTION
        WHEN SUBSCRIPT_BEYOND_COUNT THEN
            DBMS_OUTPUT.put_line (' нига не добавлена в библиотеку');
            DBMS_OUTPUT.put_line ('Ќеправильно переданы данные об авторах');
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            RETURN 0;
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line (' нига не добавлена в библиотеку');
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            RETURN 0;



    END;

    FUNCTION check_reader_for_book (
        client_id        IN  CLIENT.ID%TYPE,
        titleBook        IN  BOOK.TITLE%TYPE,
        issuere          IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER 
    IS
        resulting          NUMBER;
        e_invalid_client   EXCEPTION;
        e_invalid_book     EXCEPTION;
        count_client       NUMBER;
        count_book         NUMBER;
        count_e_on_store   NUMBER;
        already_took_book  NUMBER;
        rating             NUMBER;
        age_limit          NUMBER;
        birthday           DATE;

    BEGIN

        resulting := 0;
    -- проверка существовани€ клиента в базе
        SELECT 
            COUNT(ID)
        INTO count_client
        FROM CLIENT 
        WHERE ID = client_id;
        IF count_client = 0 THEN
            RAISE e_invalid_client;
        END IF;

    -- проверка существовани€ книги
        SELECT 
            COUNT(B.ID)
        INTO count_book
        FROM BOOK B
            JOIN PUBLISHER P
                ON P.ID = B.ID_PUBLISHER
        WHERE TITLE = titleBook
                AND P.PUBLISHER = issuere;
        IF count_book = 0 THEN
            RAISE e_invalid_book;
        END IF;

    -- узнаем сколько есть экземпл€ров на складе
        SELECT
            COUNT(TITLE)
        INTO count_e_on_store
        FROM EXEMPLAR E
            JOIN BOOK B
                ON B.ID = E.ID_BOOK
            JOIN PUBLISHER P
                ON P.ID = B.ID_PUBLISHER
        WHERE TITLE = titleBook
              AND P.PUBLISHER = issuere
              AND ON_STORE = 1;

    -- узнаем вз€л ли уже эту книгу
        SELECT 
            COUNT(*)
        INTO already_took_book
        FROM LOG_DELIVERY_RETURN_BOOK DRB
            JOIN EXEMPLAR E
                ON E.ID = DRB.ID_EXEMPLAR
            JOIN BOOK B
                ON B.ID = E.ID_BOOK
        WHERE rownum = 1
            AND DRB.RETURN_BOOK IS NULL
            AND B.TITLE = titleBook
            AND DRB.ID_CLIENT = client_id;

    -- узнаем рейтинг клиента
        SELECT
            RATING
        INTO rating
        FROM CLIENT C
        WHERE C.ID = client_id;
        
    -- узнаем возрастной ценз книги
        SELECT
            AGE_LIMIT
        INTO age_limit
        FROM BOOK B
            JOIN PUBLISHER P
                ON P.ID = B.ID_PUBLISHER
        WHERE TITLE = titleBook
            AND P.PUBLISHER = issuere;

        SELECT
            BIRTHDAY
        INTO birthday
        FROM CLIENT
        WHERE ID = client_id;


        IF count_e_on_store > 1 
            AND already_took_book = 0
            AND rating != 0
            AND age_limit <= 
                (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM birthday)) --провер€ем прохождение возрастного ценза
            THEN resulting := 1;
        END IF;

    -- выводим информацию почему нельз€ вз€ть книгу
        IF resulting = 0
        THEN
            IF count_e_on_store <= 1
            THEN DBMS_OUTPUT.put_line ('Ќет экземпл€ра дл€ выдачи');
            END IF;
            IF already_took_book != 0
            THEN DBMS_OUTPUT.put_line ('”же такую книгу вз€л');
            END IF;
            IF rating = 0
            THEN DBMS_OUTPUT.put_line (' лиент в черном списке');
            END IF;
            IF age_limit > 
                    (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM birthday))
            THEN DBMS_OUTPUT.put_line (' лиент не дорос до этой книги');
            END IF;
        END IF;

        RETURN resulting;
    EXCEPTION
        WHEN e_invalid_client THEN
            DBMS_OUTPUT.put_line ('“акого клиента не существует');
            RETURN resulting;
        WHEN e_invalid_book THEN
            DBMS_OUTPUT.put_line ('“акой книги нет в библиотеке');
            RETURN resulting;
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            RETURN resulting;
    END;

    FUNCTION get_free_exemplar (
        title           IN  BOOK.TITLE%TYPE,
        issuer       IN  PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER
    IS
        id_exemplar        EXEMPLAR.ID%TYPE;
    BEGIN
        SELECT 
            E.ID
        INTO    
            id_exemplar
        FROM EXEMPLAR E
            JOIN BOOK B
                ON B.ID = E.ID_BOOK
            JOIN PUBLISHER P
                ON P.ID = B.ID_PUBLISHER
        WHERE TITLE = title
            AND PUBLISHER = issuer
            AND ON_STORE = 1
        FETCH FIRST 1 ROWS ONLY;
    RETURN id_exemplar;
    END;

    FUNCTION delivery_book (
        id_client          IN CLIENT.ID%TYPE,
        title              IN BOOK.TITLE%TYPE,
        issuer             IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER 
    IS
        id_exemplar        EXEMPLAR.ID%TYPE;

    BEGIN

    --находим экземпл€р книги дл€ выдачи
    id_exemplar := get_free_exemplar(title => title, 
                                    issuer => issuer);

    -- заполн€ем данные в журнал выдачи
        INSERT INTO LOG_DELIVERY_RETURN_BOOK (
            TAKE_BOOK,
            ID_CLIENT,
            ID_EXEMPLAR
        ) VALUES (
            TO_DATE(SYSDATE, 'dd/mm/yyyy'), 
            id_client,
            id_exemplar 
        );

    -- мен€ем местоположение книги
        UPDATE EXEMPLAR
            SET ON_STORE = 0,
                ON_HOME = 1
        WHERE ID = id_exemplar;

    COMMIT;
        DBMS_OUTPUT.put_line (title || ' выдана, экземпл€р є' || id_exemplar);
        RETURN id_exemplar;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.put_line ('Ќет экземпл€ра дл€ выдачи');
            ROLLBACK;
            RETURN 0;
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            ROLLBACK;
            RETURN 0;
    END;

    FUNCTION get_book (
        id_client$          IN CLIENT.ID%TYPE,
        title$              IN BOOK.TITLE%TYPE,
        issuer$             IN PUBLISHER.PUBLISHER%TYPE
    )
    RETURN NUMBER
    IS
        delivery_exemplar_id   NUMBER;
    BEGIN
        IF check_reader_for_book(client_id => id_client$,
                                    titleBook => title$,                               
                                    issuere => issuer$) = 1 
        THEN delivery_exemplar_id := delivery_book(
                            id_client  => id_client$,
                            title  => title$,
                            issuer  => issuer$
                            );
        ELSE DBMS_OUTPUT.put_line ('Ќельз€ выдать книгу');
            delivery_exemplar_id := 0;

    END IF;
    RETURN delivery_exemplar_id;
    END;

    FUNCTION find_exemplar_of_client(
        title$                  IN BOOK.TITLE%TYPE, 
        publisher$              IN PUBLISHER.PUBLISHER%TYPE, 
        id_client$              IN CLIENT.ID%TYPE 
    )
    RETURN NUMBER
    IS
        id_exemplar$        EXEMPLAR.ID%TYPE;

    BEGIN
        SELECT 
            E.ID
        INTO    
            id_exemplar$
        FROM EXEMPLAR E
            JOIN BOOK B
                ON B.ID = E.ID_BOOK
            JOIN PUBLISHER P
                ON P.ID = B.ID_PUBLISHER
            JOIN LOG_DELIVERY_RETURN_BOOK DRB
                ON DRB.ID_EXEMPLAR = E.ID
            JOIN CLIENT C
                ON C.ID = DRB.ID_CLIENT
        WHERE TITLE = title$
            AND P.PUBLISHER = publisher$
            AND C.ID = id_client$
            AND DRB.RETURN_BOOK IS NULL;
        RETURN id_exemplar$;
    END;

    PROCEDURE return_book (
        id_client$          IN CLIENT.ID%TYPE,
        title$              IN BOOK.TITLE%TYPE,
        publisher$          IN PUBLISHER.PUBLISHER%TYPE,
        rate_from_client$   IN NUMBER
    )
    IS
        id_exemplar$        EXEMPLAR.ID%TYPE;
    BEGIN

    --находим экземпл€р книги которую вз€л клиент
        id_exemplar$ := find_exemplar_of_client(title$, publisher$, id_client$);

  
    -- обновл€ем данные в журнал выдачи о возврате
        UPDATE LOG_DELIVERY_RETURN_BOOK DRB
            SET RETURN_BOOK = TO_DATE(SYSDATE, 'dd/mm/yyyy'),
                RATING_BOOK = rate_from_client$
        WHERE ID_CLIENT = id_client$
                AND ID_EXEMPLAR = id_exemplar$;


    -- мен€ем местоположение книги
        UPDATE EXEMPLAR
            SET ON_STORE = 1,
                ON_HOME = 0
        WHERE ID = id_exemplar$;
        COMMIT;

        DBMS_OUTPUT.put_line (title$ || ' возвращена, экземпл€р є' || id_exemplar$);
        
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.put_line ('“акую книгу не брал');
            ROLLBACK;
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            ROLLBACK;
    END;

END;
/


-- пакет дл€ работы с клиентами
CREATE OR REPLACE PACKAGE client_pkg
IS

--создание пользовател€ и выдачи чит. билета
    FUNCTION create_client (
        first_name         IN CLIENT.FIRST_NAME%TYPE,
        last_name          IN CLIENT.LAST_NAME%TYPE,
        father_name        IN CLIENT.FATHER_NAME%TYPE,
        birthday           IN CLIENT.BIRTHDAY%TYPE,
        employee           IN CLIENT.EMPLOYEE%TYPE,
        rating             IN CLIENT.RATING%TYPE)
    RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY client_pkg
IS

    FUNCTION create_client (
        first_name         IN CLIENT.FIRST_NAME%TYPE,
        last_name          IN CLIENT.LAST_NAME%TYPE,
        father_name        IN CLIENT.FATHER_NAME%TYPE,
        birthday           IN CLIENT.BIRTHDAY%TYPE,
        employee           IN CLIENT.EMPLOYEE%TYPE,
        rating             IN CLIENT.RATING%TYPE)
    RETURN NUMBER IS
        client_id  NUMBER;
    BEGIN


    -- заполн€ем таблицу клиент и таблицу времени изменени€ информации о пользователе
        INSERT INTO CLIENT (
            FIRST_NAME,
            LAST_NAME,
            FATHER_NAME,
            BIRTHDAY,
            EMPLOYEE,
            RATING
        ) VALUES (
            first_name,
            last_name,
            father_name,
            birthday,
            employee,
            rating
        )
        RETURNING ID INTO client_id;

        INSERT INTO CARD_CHANGE_TIME (
            ID,
            CREATE_CARD
        ) VALUES (
            client_id,
            TO_DATE(SYSDATE, 'dd/mm/yyyy')
        );

        COMMIT;
        DBMS_OUTPUT.put_line ('—оздан читательский билет на ' || first_name || ' ' || last_name || ' ' || father_name);
        RETURN client_id;
    EXCEPTION
        WHEN PROGRAM_ERROR THEN
            DBMS_OUTPUT.put_line ('¬нутренн€€ ошибка pl/sql');
            ROLLBACK;
            RETURN 0;
        WHEN OTHERS THEN
            IF SQLCODE = '-1400' THEN
                DBMS_OUTPUT.put_line ('ѕолученные не все данные дл€ создани€ пользовател€');
            END IF; 
            DBMS_OUTPUT.put_line ('„итательский билет не создан');
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
            ROLLBACK;
            RETURN 0;

    END;
END;
/


-- пакет дл€ получени€ отчетов
CREATE OR REPLACE PACKAGE report_pkg
    IS
-- получение отчета о выданных книгах за день в json формате
    PROCEDURE took_books_a_day_json (
        p_day                IN LOG_DELIVERY_RETURN_BOOK.TAKE_BOOK%TYPE
    );

-- получение отчета о вернувшихс€ книгах за день
    PROCEDURE return_books_a_day (
        p_day                IN LOG_DELIVERY_RETURN_BOOK.TAKE_BOOK%TYPE
    );
    
-- получение полного отчета об инвентаризации в разрезе каждой книги ( огда поступила на склад, когда и кто еЄ брал и вернул, когда была утрачена).
    PROCEDURE inventory;

-- отчет об инвентаризации книги( огда поступила на склад, когда и кто еЄ брал и вернул, когда была утрачена).
    PROCEDURE inventory_of_one (
        p_id_exemplar                IN NUMBER
    );

END;
/

CREATE OR REPLACE PACKAGE BODY report_pkg
    IS

    PROCEDURE took_books_a_day_json (
        p_day                IN LOG_DELIVERY_RETURN_BOOK.TAKE_BOOK%TYPE
    )
    IS
        p_obj               JSON_OBJECT_T;
        p_arr               JSON_ARRAY_T;
        p_counter           NUMBER; 

    BEGIN

        p_arr := JSON_ARRAY_T('[]');
        p_obj := JSON_OBJECT_T('{}');
        p_counter := 1; --инициализируем счетчик кол-ва выданных книг

        FOR I IN (
            SELECT 
                TITLE, 
                LISTAGG(DISTINCT FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR,
                PUBLISHER,
                E.ID AS EXEMPL
            FROM LOG_DELIVERY_RETURN_BOOK DRB 
                JOIN EXEMPLAR E
                    ON E.ID = DRB.ID_EXEMPLAR
                JOIN BOOK B 
                    ON (B.ID = E.ID_BOOK)
                LEFT JOIN AUTHOR_WROTE_BOOK AWB 
                    ON (AWB.ID_BOOK = B.ID)
                LEFT JOIN AUTHOR A 
                    ON(A.ID = AWB.ID_AUTHOR)
                LEFT JOIN PUBLISHER P 
                    ON (P.ID = B.ID_PUBLISHER) 
            WHERE TAKE_BOOK = p_day
            GROUP BY TITLE, PUBLISHER, E.ID
        )
        LOOP
            p_arr.APPEND(
                JSON_OBJECT_T('
                {"' || p_counter || '":{"Ќазвание":"' || I.TITLE || '",
                                            "јвторы":"' || I.AUTHOR || '",
                                            "»здательство":"' || I.PUBLISHER || '",
                                            "є Ёкземпл€ра":' || I.EXEMPL || '}}'));
            p_counter := p_counter + 1;   
        END LOOP;

        p_obj.PUT('¬ыданные книги за ' || p_day, p_arr);
        DBMS_OUTPUT.PUT_LINE(p_obj.STRINGIFY);

    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE = '-1861' THEN
                DBMS_OUTPUT.put_line ('Ќеверна€ дата');
            ELSE
                DBMS_OUTPUT.put_line ('ќшибка');
                DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
                DBMS_OUTPUT.put_line (SQLERRM);
            END IF;
    END;


    PROCEDURE return_books_a_day (
        p_day                IN LOG_DELIVERY_RETURN_BOOK.TAKE_BOOK%TYPE
    )
    IS
        p_rc                  SYS_REFCURSOR;
        p_title               BOOK.TITLE%TYPE;
        p_author              VARCHAR2(1000);
        p_publ                VARCHAR2(1000);
    BEGIN

        OPEN p_rc FOR
        SELECT 
            TITLE, 
            LISTAGG(DISTINCT FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR, 
            PUBLISHER 
        FROM LOG_DELIVERY_RETURN_BOOK DRB 
            JOIN EXEMPLAR E
                ON E.ID = DRB.ID_EXEMPLAR
            JOIN BOOK B 
                ON (B.ID = E.ID_BOOK)
            LEFT JOIN AUTHOR_WROTE_BOOK AWB 
                ON (AWB.ID_BOOK = B.ID)
            LEFT JOIN AUTHOR A 
                ON(A.ID = AWB.ID_AUTHOR)
            LEFT JOIN PUBLISHER P 
                ON (P.ID = B.ID_PUBLISHER) 
        WHERE RETURN_BOOK = p_day
        GROUP BY TITLE, PUBLISHER;

        DBMS_OUTPUT.put_line ('¬ернувшиес€ книги за ' || p_day);
        DBMS_OUTPUT.put_line (' ');
        DBMS_OUTPUT.put_line ('Ќазвание' || '     ' || 'јвторы' || '     ' || '»здательство');
        LOOP
            FETCH p_rc INTO p_title, p_author, p_publ;
            EXIT WHEN p_rc%NOTFOUND;
            DBMS_OUTPUT.PUT_LINE(p_title || '     ' || p_author || '     ' || p_publ);
            DBMS_OUTPUT.PUT_LINE('-----    -------');
        END LOOP;

    EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE = '-1861' THEN
            DBMS_OUTPUT.put_line ('Ќеверна€ дата');
        ELSE
            DBMS_OUTPUT.put_line ('ќшибка');
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
        END IF;
    END;

    PROCEDURE inventory_of_one (
        p_id_exemplar                IN NUMBER
    )
    IS
        p_take_return_exemplar    SYS_REFCURSOR;
        e_invalid_exemplar     EXCEPTION;
        p_count_exemplar         NUMBER;
        p_client                 VARCHAR2(500);
        p_take                   DATE;
        p_return_b               DATE;
        p_title                  VARCHAR2(500);
        p_author                 VARCHAR2(500);
        p_publ                   VARCHAR2(500);
        p_date_ar                DATE;
        p_date_leav              DATE;
    BEGIN
    -- проверка существовани€ экземпл€ра в базе
        SELECT 
            COUNT(ID)
        INTO p_count_exemplar
        FROM EXEMPLAR 
        WHERE ID = p_id_exemplar;
        IF p_count_exemplar = 0 THEN
            RAISE e_invalid_exemplar;
        END IF;

    -- проверка существовани€ экземпл€ра в журнале приемки выдачи
        SELECT 
            COUNT(ID)
        INTO p_count_exemplar
        FROM LOG_ADD_DELETE_BOOK ADB
        WHERE ADB.ID_EXEMPLAR = p_id_exemplar;
        IF p_count_exemplar != 0 THEN
        -- выбираем данные о поступлении в библиотеку и об утрате
            SELECT
                ADB.ENTERED,
                ADB.LEAV
            INTO
                p_date_ar,
                p_date_leav
            FROM LOG_ADD_DELETE_BOOK ADB
                JOIN EXEMPLAR E
                    ON ADB.ID_EXEMPLAR = E.ID
                WHERE ID_EXEMPLAR = p_id_exemplar;
        END IF;
-- выбираем данные о книге
            SELECT
                TITLE, 
                LISTAGG(FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR, 
                PUBLISHER
            INTO
                p_title,
                p_author,
                p_publ
            FROM EXEMPLAR E
                JOIN BOOK B
                    ON B.ID = E.ID_BOOK
                LEFT JOIN AUTHOR_WROTE_BOOK AWB
                    ON AWB.ID_BOOK = B.ID
                LEFT JOIN AUTHOR A
                    ON A.ID = AWB.ID_AUTHOR
                LEFT JOIN PUBLISHER P
                    ON P.ID = B.ID_PUBLISHER
                WHERE E.ID = p_id_exemplar
                GROUP BY TITLE, PUBLISHER;

        DBMS_OUTPUT.put_line ('ƒанные о поступлении в библиотеку и об утрате экземпл€ра ' || p_id_exemplar);
        DBMS_OUTPUT.put_line (' ');
        DBMS_OUTPUT.put_line ('Ќазвание: ' || p_title);
        DBMS_OUTPUT.put_line ('јвторы: ' || p_author);
        DBMS_OUTPUT.put_line ('»здательство: ' || p_publ);
        DBMS_OUTPUT.put_line ('ѕоступила: ' || p_date_ar);
        DBMS_OUTPUT.put_line ('”была: ' || p_date_leav);
        DBMS_OUTPUT.PUT_LINE(' ');

        OPEN p_take_return_exemplar FOR
    -- выбираем данные о том когда и кто еЄ брал и вернул
        SELECT
            C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME AS CLIENT,
            TAKE_BOOK,
            RETURN_BOOK 
        FROM LOG_DELIVERY_RETURN_BOOK DRB
            JOIN EXEMPLAR E
                ON DRB.ID_EXEMPLAR = E.ID
            JOIN CLIENT C
                ON C.ID = DRB.ID_CLIENT
            WHERE ID_EXEMPLAR = p_id_exemplar;

        DBMS_OUTPUT.put_line ('ƒанные о том когда и кто еЄ брал и вернул');
        DBMS_OUTPUT.put_line (' ');
        LOOP
            FETCH p_take_return_exemplar INTO p_client, p_take, p_return_b;
            EXIT WHEN p_take_return_exemplar%NOTFOUND;
            DBMS_OUTPUT.put_line (' лиент - ' || p_client);
            DBMS_OUTPUT.put_line ('¬з€л - ' || p_take);
            DBMS_OUTPUT.put_line ('¬ернул - ' || p_return_b);
            DBMS_OUTPUT.PUT_LINE('-----    -------');
        END LOOP;

    EXCEPTION
        WHEN e_invalid_exemplar THEN
            DBMS_OUTPUT.put_line ('“акого экземпл€ра не существует');
        WHEN OTHERS THEN
            DBMS_OUTPUT.put_line (' од ошибки - ' || SQLCODE);
            DBMS_OUTPUT.put_line (SQLERRM);
    END;

    PROCEDURE inventory
    IS
        p_test_take_return_exemplar    SYS_REFCURSOR;
        p_test_exmp                  NUMBER;
    BEGIN
    
        OPEN p_test_take_return_exemplar FOR
            SELECT ID FROM EXEMPLAR ORDER BY ID;
-- получаем отчет дл€ каждого экземпл€ра в библиотеке
        LOOP
            FETCH p_test_take_return_exemplar INTO p_test_exmp;
            EXIT WHEN p_test_take_return_exemplar%NOTFOUND;
            inventory_of_one(p_test_exmp);
            DBMS_OUTPUT.put_line ('++++++++++++++++++');
        END LOOP;

    END;

END;
/


-- добавл€ем книги
DECLARE
    BOOK_ID$                NUMBER;
BEGIN

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'ћанн',
        title => ' нига радости.  ак быть счастливым в мен€ющемс€ мире',
        summary => 'ƒва великих духовных лидера. ѕ€ть дней. ќдин вечный вопрос.¬ апреле 2015 года два самых радостных человека на свете - лауреаты Ќобелевской премии ƒалай-лама и архиепископ “уту - встретились в ƒхарамсале, чтобы отметить восьмидес€тый день рождени€ ≈го —в€тейшества, огл€нутьс€ на прожитые годы, полные непростых испытаний, и найти ответ на вечный вопрос: как найти радость в жизни, когда нас обуревают повседневные невзгоды - от недовольства дорожными пробками до страха, что мы не сможем обеспечить семью, от злости на тех, кто несправедливо с нами обошелс€, до гор€ утраты любимого человека, от опустошенности, которую приносит т€жела€ болезнь, до бездны отча€ни€, приход€щей со смертью?ƒиалоги велись в течение недели. ƒуховные мастера обсуждали преп€тстви€, которые мешают нам радоватьс€ жизни, подробно проговаривали негативные эмоции, их воздействие на человека и...',
        year_of_publication => 2002,
        age_limit => 13,
        price => 1638,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒуглас'),
        a_last_names => book_pkg.a_last_name('јбрамс'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('человека', 'ƒва', 'найти', 'вечный'),
        genres => book_pkg.genre('–елигии мира')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 44,
        issuer => 'ћанн',
        title => ' луб убийств по четвергам',
        summary => 'ќ книге„етверо престарелых героев...ѕервое серьезное дело дл€ женщины-полицейского...∆естокое убийство...ƒобро пожаловать в клуб "”бийства по четвергам"!¬ доме престарелых, расположенном среди мирных сельских пейзажей, четверо друзей еженедельно встречаютс€ в комнате дл€ отдыха, чтобы обсудить нераскрытые преступлени€. ќни называют себ€ " луб убийств по четвергам". Ёлизабет, ƒжойс, »брагим и –он уже размен€ли восьмой дес€ток, но у них все еще есть кое-какие трюки в запасе.  огда местного строител€ наход€т мертвым, а р€дом с телом обнаруживаетс€ таинственна€ фотографи€, " луб убийств по четвергам" внезапно получает первое насто€щее дело. ¬скоре количество трупов начинает расти. —может ли наша необычна€ команда поймать убийцу, пока не стало слишком поздно?ќб авторе–ичард “омас ќсман (родилс€ 28 но€бр€ 1970 года) - английский телеведущий, продюсер, комик и писатель, наиболее из...',
        year_of_publication => 2021,
        age_limit => 18,
        price => 798,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('–ичард'),
        a_last_names => book_pkg.a_last_name('ќсман'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('клуб', 'четвергам', 'ѕервое', 'убийств'),
        genres => book_pkg.genre('ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 4,
        issuer => 'Ћабиринт',
        title => 'ѕриключени€ “ома —ойера',
        summary => '"ѕриключени€ “ома —ойера", одно из самых попул€рных произведений знаменитого американского писател€ ћарка “вена, рассказывает о жизни в маленьком городке на ћиссисипи в 30-40-х годах’1’ века.  ак признавалс€ сам автор, большинство приключений, описанных в этой книге, происходило на самом деле - с ним самим или его школьными товарищами. » хот€ с тех пор прошло уже почти два столети€, проделки “ома по-прежнему вызывают улыбку и сочувствие, причем не только у юных читателей. Ќедаром ћарк “вен за€вл€л, что своей книгой он хотел бы напомнить взрослым, какими они были когда-то, что думали и чувствовали и какие удивительные событи€ с ними случались. нига с классическими иллюстраци€ми јнатоли€ »ткина.ƒл€ детей 8-12 лет.',
        year_of_publication => 2020,
        age_limit => 3,
        price => 1162,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ћарк'),
        a_last_names => book_pkg.a_last_name('“вен'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('“ома', 'ѕриключени€', 'самых', '—ойера'),
        genres => book_pkg.genre('ѕриключени€', 'ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 6,
        issuer => '‘еникс',
        title => '”рри ¬ульф и похититель собак. »стори€ юного изобретател€',
        summary => 'Ќе об€зательно быть взрослым, чтобы совершать открыти€. ”рри ¬ульф - мальчик-изобретатель - знает это абсолютно точно. Ѕольше всего на свете ”рри мечтает построить скоростной космический корабль, чтобы путь на Ћуну и обратно занимал не больше часа. ј на Ћуну ему нужно попасть непременно. ¬едь там его ждЄт папа.—умеет ли ”рри воплотить свою мечту? »ли трудности, с которыми он столкнЄтс€, застав€т его отступить? ѕоживЄм - увидим. ј пока ему предстоит помочь при€тельнице ‘эбби найти пропавшего щенка. ƒл€ этой цели ”рри создаЄт робопса со сверхострым нюхом, микровошь дл€ прослушивани€ и авточерепаху "ѕ–џ“№", которые помогут отыскать пропажу. ¬ообще ”рри глубоко убеждЄн, что в скором будущем мир будет заселЄн роботами. ћашины будут лечить людей, защищать «емлю от столкновени€ с метеоритами, а нанороботы боротьс€ с вирусами. ≈го смелые мысли у одних вызывают смех, у др...',
        year_of_publication => 2021,
        age_limit => 5,
        price => 633,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('≈вгени€'),
        a_last_names => book_pkg.a_last_name('¬ысокосна€'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('”рри', 'больше', 'Ћуну', 'взрослым'),
        genres => book_pkg.genre('ѕриключени€', 'ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 24,
        issuer => '“екст',
        title => '1984',
        summary => 'ѕрошло всего три года после окончани€ ¬торой мировой войны, когда ƒжордж ќруэлл (1903-1950) написал самое знаменитое свое произведение - роман-антиутопию "1984". ћногое из того, о чем писал ƒжордж ќруэлл, покажетс€ вам до безуми€ знакомым. Ќекоторые исследователи считают, что ни один западный читатель не постигнет суть "1984" так глубоко, как человек родом из —оветского —оюза.¬ойна - это мир—вобода - это рабствоЌезнание - сила то управл€ет прошлым, тот управл€ет будущим; кто управл€ет насто€щим, тот управл€ет прошлым. ƒействительность не есть нечто внешнее. ƒействительность существует в человеческом сознании и больше нигде. огда любишь кого-то, ты его любишь, и, если ничего больше не можешь ему дать, ты все-таки даешь ему любовьЕƒжордж ќруэлл',
        year_of_publication => 2020,
        age_limit => 14,
        price => 344,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжордж'),
        a_last_names => book_pkg.a_last_name('ќруэлл'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('управл€ет', 'ќруэлл', 'прошлым', 'ƒействительность'),
        genres => book_pkg.genre('зарубежна€ проза')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 66,
        issuer => 'Ёксмо',
        title => '1984',
        summary => 'ƒжордж ќруэлл Ч один из самых читаемых в мире авторов и очень противоречива€ персона своего времени. –одилс€ в Ѕенгалии, училс€ в »тоне, работал в полиции, на радио и в букинистическом магазине, воевал в »спании и писал книги. ярый противник коммунизма и защитник демократического социализма, ќруэлл устроил бунт против общества, к которому так стремилс€, но в котором чувствовал себ€ абсолютно чужим.  ¬ книге представлены четыре разных произведени€ ќруэлла: ранние романы Ђƒни в Ѕирмеї и Ђƒочь св€щенникаї, а также принесшие мировую известность сатирическа€ повесть-притча Ђ—котный дворї и антиутопи€ Ђ1984ї.  ѕервый роман ќруэлла Ђƒни в Ѕирмеї основан на его опыте работы в колониальной полиции Ѕирмы в 1920-е годы и вызвал гор€чие споры из-за резкого изображени€ колониального общества. Ђƒочь св€щенникаї знакомит с совершенно иным ќруэллом Ч мастером психологического ре...',
        year_of_publication => 2012,
        age_limit => 14,
        price => 844,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжордж'),
        a_last_names => book_pkg.a_last_name('ќруэлл'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('общества', 'полиции', 'ќруэлл', 'ќруэлл'),
        genres => book_pkg.genre('зарубежна€ проза')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 33,
        issuer => 'јнтологи€',
        title => '1984',
        summary => 'ƒжордж ќруэлл (1903-1950) всем своим творчеством протестовал против тоталитарного общественного устройства. Ёта тема в силу исторических причин была актуальна в литературе первой половины XX века, но не утратила своей злободневности и в наши дни. –оман-антиутопи€ "1984" (1949) рисует тоталитарный Ћондон будущего - крупный город ќкеании, котора€ находитс€ в беспрерывном состо€нии войны с двум€ другими мировыми сверхдержавами. ¬ обществе прин€та жестка€ социальна€ иерархи€, большинство граждан живут в нищете и под непрекращающимс€ контролем ѕолиции мыслей. √лавный герой ”инстон —мит многие годы выдает себ€ за добропор€дочного чиновника, раздел€ющего общеприн€тые политические идеалы. Ќо внезапно вспыхнувшее чувство к коллеге ƒжулии переворачивает его жизнь: приносит недолгое счастье, но и ставит вне рамок закона.',
        year_of_publication => 2021,
        age_limit => 14,
        price => 391,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжордж'),
        a_last_names => book_pkg.a_last_name('ќруэлл'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('ƒжордж', 'ќруэлл', 'творчеством', 'протестовал'),
        genres => book_pkg.genre('зарубежна€ проза')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 17,
        issuer => ' аро',
        title => '1984',
        summary => '–оман "1984" - вершина творчества ƒжорджа ќруэлла. ¬ нем показано общество, в котором люди четко разделены на классы: верхний, привилегированный, партийна€ верхушка; средний, не имеющий права ни на что, наход€щийс€ под посто€нным прицелом телекамер и подслушивающих устройств, лишенный общени€ и эмоций, делающий механическую работу по регул€рному переписыванию истории, обделенный во всем; низший - как бы пролетариат. ¬ этом обществе искорен€етс€ люба€ мысль; человек живет в страхе наказани€, которое неизбежно последует за любую провинность. “акое общество уничтожает в человеке все человеческое. „тобы человек меньше думал, примитивизируетс€ €зык, переписываютс€ книги и газеты, поощр€етс€ доносительство, предательство - даже своих близких. Ќе остаетс€ ничего св€того и, соответственно, ничего, дл€ чего хотелось бы жить. Ётот роман - захватывающее, но страшное повеств...',
        year_of_publication => 2016,
        age_limit => 14,
        price => 281,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжордж'),
        a_last_names => book_pkg.a_last_name('ќруэлл'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('человек', 'общество', 'роман', 'ничего'),
        genres => book_pkg.genre('зарубежна€ проза')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'ј—“',
        title => '1984',
        summary => '—воеобразный антипод второй великой антиутопии XX века - "ќ дивный новый мир" ќлдоса ’аксли. „то, в сущности, страшнее: доведенное до абсурда "общество потреблени€" - или доведенное до абсолюта "общество идеи"? ѕо ќруэллу, нет и не может быть ничего ужаснее тотальной несвободы... аждый день ”инстон —мит переписывает историю в соответствии с новой линией ћинистерства ѕравды. — каждой ложью, которую он переносит на бумагу, ”инстон всЄ больше ненавидит ѕартию, котора€ не интересуетс€ ничем кроме власти, и котора€ не терпит инакомысли€. Ќо чем больше ”инстон стараетс€ думать иначе, тем сложнее ему становитс€ избежать ареста, ведь Ѕольшой Ѕрат всегда следит за тобойЕ
    ',
        year_of_publication => 2008,
        age_limit => 16,
        price => 269,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжордж'),
        a_last_names => book_pkg.a_last_name('ќруэлл'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('”инстон', 'общество', 'больше', 'антипод'),
        genres => book_pkg.genre('фантастика')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'Ёксмо',
        title => '√ибель Ѕогов-2. ƒуша Ѕога. “ом 1',
        summary => '”пор€доченное гибнет. ’аос рвЄт его на части, ƒальние обращают миры в мЄртвые кристаллы. √ремит величайша€ из битв, –агнарЄк, где все сражаютс€ против всех в тщетной попытке прожить лишний день. √ибнут герои и защитники, а умершие, напротив, возвращаютс€ к жизни. »з небыти€ выныривает тень величайшего оружи€ - трЄх магических ћечей, јлмазного, ƒерев€нного и ћеча Ћюдей. “олько кому они понадобились в дни всеобщей погибели?  то и зачем собрал в недрах ћежреальности немЄртвую јрмаду?  уда ведЄт золотой луч, путь, пройти по которому сможет лишь один? » зачем девочка –андгрид бьЄтс€ изо всех сил с гигантским змеем - ведь в –агнарЄке нельз€ победить!»ли всЄ-таки можно?..',
        year_of_publication => 2020,
        age_limit => 15,
        price => 1450,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('Ќик'),
        a_last_names => book_pkg.a_last_name('ѕерумов'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('зачем', '”пор€доченное', '’аос', 'гибнет'),
        genres => book_pkg.genre('фантастика')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 10,
        issuer => '‘еникс',
        title => '√ибель Ѕогов-2. ƒуша Ѕога. “ом 2',
        summary => '—амое масштабное эпическое полотно в отечественной фантастике. ÷икл, ставший классикой русского фэнтези. ќдин из самых больших литературных русско€зычных фэндомов. ¬сЄ это - "√ибель Ѕогов" Ќика ѕерумова! »стори€, начата€ больше тридцати лет назад, подошла к своему завершению. ћы узнаем, что случилось со всеми геро€ми саги, смертными и бессмертными, уцелела ли ¬селенна€ ”пор€доченного и вышел ли кто-нибудь победителем в схватке вселенских сил.¬ день, когда заканчиваютс€ все пути, открываютс€ все двери и наход€тс€ ответы на все вопросы. ¬ день –агнарЄка, истинной гибели богов.',
        year_of_publication => 2023,
        age_limit => 14,
        price => 1431,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('Ќик'),
        a_last_names => book_pkg.a_last_name('ѕерумов'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('Ѕогов', 'день', 'масштабное', '—амое'),
        genres => book_pkg.genre('√ероическое отечественное фэнтези')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 34,
        issuer => '¬олчок',
        title => ' аскадерки идут до конца',
        summary => 'ƒевочки такие разные:  ирка занимаетс€ спортом, а ¬ар€ играет на пианино,  ирка прыгает выше всех и бегает быстрее, зато ¬ар€ умеет выдумывать новые интересные слова. ќдинаковые у них только причЄски и царапины на коленках. Ќо дл€ дружбы на всю жизнь этого мало. Ќужно общее дело, чтоб не расставатьс€ до самой старости! Ќапример, снимать кино. ¬ главной роли, конечно,  ирка - ловка€, смела€, насто€ща€ каскадЄрка! ј ¬ар€ - сценарист и оператор.Ќо кино приходитс€ забросить, когда с одной из девочек случаетс€ бедаЕ а подруга приходит ей на помощь. Ќельз€ бросать дружбу на полпути.  аскадЄрки никогда не сдаютс€!јнна јнисимова - автор детских книг, лауреат премии ћаршака и финалист премии  рапивина. ¬ издательстве "¬олчок" выходили еЄ книги "√ут€" и " едровый слоник".ƒл€ детей среднего школьного возраста.',
        year_of_publication => 2007,
        age_limit => 3,
        price => 308,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('јнна', 'Ќик'),
        a_last_names => book_pkg.a_last_name('јнисимова', 'ѕерумов'),
        a_father_names => book_pkg.a_father_name('¬икторовна', ' '),
        tags => book_pkg.tag(' ирка', '¬ар€', 'кино', 'премии'),
        genres => book_pkg.genre('ѕовести и рассказы о дет€х')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'ѕ€ть четвертей',
        title => '¬асилькин ƒ. —едьмой отр€д',
        summary => 'ƒолгожданные каникулы наконец наступили, и выпускник третьего класса ƒима ¬асилькин впервые едет в летний лагерь. Ѕудем откровенны: сама поездка ему была не очень интересна - наш герой просто готовил сюрприз лучшему другу.  ак удивилс€ бы  остик, обнаружив, что они проведут лето вместе! “олько вот судьба преподносит свои сюрпризы!..  ажетс€, каникулы безнадЄжно испорчены. »ли всЄ-таки нет?..¬иктори€ Ћедерман давно знакома читател€м как классик современной детской литературы и лауреат множества премий, среди которых - " нигуру",  орнейчуковска€,  рапивинска€, "јлиса", посв€щЄнна€ пам€ти  ира ЅулычЄва. √ерои книг ¬иктории Ћедерман - мальчишки и девчонки, которые попадают в самые необычайные обсто€тельства, позвол€ющие им не только проверить свою дружбу на прочность, но и лучше узнать себ€.ƒл€ младшего и среднего школьного возраста.',
        year_of_publication => 2020,
        age_limit => 3,
        price => 720,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('¬иктори€', 'јнна'),
        a_last_names => book_pkg.a_last_name('Ћедерман', 'јнисимова'),
        a_father_names => book_pkg.a_father_name(' ', '¬икторовна'),
        tags => book_pkg.tag('каникулы', 'Ћедерман', 'наконец', 'ƒолгожданные'),
        genres => book_pkg.genre('ѕовести и рассказы о дет€х')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 55,
        issuer => 'XL Media',
        title => 'ѕроза брод€чих псов. “ом 1',
        summary => 'ћальчика по имени јцуси Ќакадзима выгон€ют из сиротского приюта, и так он оказываетс€ в »окогаме без денег и крыши над головой. јцуси в таком отча€нии, что решаетс€ ограбить первого встречного. ќднако сердце у него доброе, и вместо ограблени€ он спасает жизнь тонущему человеку, которого видит в реке. Ётим человеком оказываетс€ некто ќсаму ƒадзай Ч эксцентричный сотрудник так называемого ¬ооруженного детективного агентства. ¬ данный момент он и его товарищи ищут загадочного тигра-людоеда, навод€щего страх на жителей округи. јцуси и сам натерпелс€ от этого тигра, поэтому соглашаетс€ помочь ƒадзаю в поисках. ¬скоре он знакомитс€ с другими сотрудниками агентства, где каждый другого чуднее.',
        year_of_publication => 2021,
        age_limit => 5,
        price => 628,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name(' афка', 'јнна'),
        a_last_names => book_pkg.a_last_name('јсагири', 'јнисимова'),
        a_father_names => book_pkg.a_father_name(' ', '¬икторовна'),
        tags => book_pkg.tag('јцуси', 'оказываетс€', 'агентства', 'имени'),
        genres => book_pkg.genre('ћанга')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 5,
        issuer => 'XL Media',
        title => 'ѕроза брод€чих псов. “ом 2',
        summary => ' Єка »дзуми воспротивилась приказу мафии и едва не погибла по собственной вине. јцуси Ќакадзима спас ее да еще тофу накормил - все ради того, чтобы выведать ценные сведени€Е “олько мир и покой продлились недолго: јкутагава разработал коварный план похищени€ јцуси. “ем временем перед закованным в цепи ƒадзаем предстал бывший товарищ-мафиози, а теперь его недруг - “ю€ Ќакахара. ƒадзай ќсаму против “юи Ќакахары, –юноскэ јкутагава против јцуси ЌакадзимыЕ   чему приведет крупный конфликт между вооруженными детективами и мафией?',
        year_of_publication => 2021,
        age_limit => 5,
        price => 628,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name(' афка'),
        a_last_names => book_pkg.a_last_name('јсагири'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('јцуси', 'јкутагава', 'против', '»дзуми'),
        genres => book_pkg.genre('ћанга')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 5,
        issuer => 'ќлимп-Ѕизнес',
        title => 'Ќет, спасибо, € просто смотрю.  ак посетител€ превратить в покупател€',
        summary => '√арри ‘ридман - мастер розничной торговли и обучени€ в этой области.  нига "Ќет, спасибо, € просто смотрю" о розничной торговле. ”никальность √. ‘ридмана и его книги заключаетс€ именно в непревзойденной способности превращать потенциальных покупателей в тех, кто действительно покупает, а также учить этому других. »спользу€ юмор, сопричастность и свой огромный опыт, он рассказывает о том, как достичь вершин мастерства в обслуживании покупателей и стать самым успешным продавцом. ¬ы узнаете, как преодолеть сопротивление покупател€, как вы€снить, что он хочет, как заставить его сделать не только основную, но и дополнительную покупку. ѕриемы, описанные в этой книге, позвол€т вам значительно ускорить продвижение по служебной лестнице.',
        year_of_publication => 2021,
        age_limit => 3,
        price => 767,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('√арри', ' афка'),
        a_last_names => book_pkg.a_last_name('‘ридман', 'јсагири'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('розничной', 'покупателей', '‘ридман', '√арри'),
        genres => book_pkg.genre('“ехники продаж')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 124,
        issuer => 'ћанн',
        title => '45 татуировок продавана. ѕравила дл€ тех, кто продаЄт и управл€ет продажами',
        summary => 'ќ книгеЌовые 45 татуировок из продавцового прошлого ћаксима Ѕатырева - как в роли р€дового менеджера по продажам, так и в роли руководител€: успехи, неудачи, выводы из них.ќдна из самых непростых и в то же врем€ интересных профессий - это професси€ человека, который ежедневно, ежечасно и ежеминутно защищает интересы организации, провод€ коммерческие переговоры с еЄ потенциальными заказчиками и будущими партнерами.ћаксим Ѕатырев уверен: все, чего он достиг в своей профессиональной де€тельности, он достиг благодар€ работе в продажах. ѕродажи учат защищать свои интересы, выступать публично, вести переговоры с клиентами, делать своими руками презентации, вн€тно формулировать свои мысли и многому другому.ѕродажи делают людей сильными.≈сли вы научитесь продавать товары с не самой очевидной выгодой на одном из самых высококонкурентных рынков, то вам по плечу будут практ...',
        year_of_publication => 2021,
        age_limit => 3,
        price => 1461,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ћаксим', ' афка'),
        a_last_names => book_pkg.a_last_name('Ѕатырев', 'јсагири'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('интересы', 'самых', 'роли', 'переговоры'),
        genres => book_pkg.genre('“ехники продаж')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 44,
        issuer => 'ƒискурс',
        title => '11 исследований о жизни на «емле. –ождественские лекции  оролевского института ¬еликобритании',
        summary => 'Ётот сборник лекций  оролевского института посв€щен исследовани€м разнообразных организмов, которые могут приоткрыть тайну возникновени€ жизни на «емле. ≈ще сотню лет назад ученые с помощью рисунков пытались воссоздать, как выгл€дели динозавры, а сегодн€ представление о вымерших рептили€х кардинально изменилось. ”же в начале прошлого века исследователи предупреждали об угрозе очередного массового вымирани€ видов. “огда же была озвучена иде€ экосистем, в которых органично взаимодействуют различные обитатели нашей планеты: растени€, рыбы, животные, насекомые. ќни общаютс€ друг с другом и природной средой, посылают сигналы об опасности и умеют защищатьс€, а некоторые поражают своим пением, как, например, горбатые киты. ¬ XXI веке наука подтверждает: от сложных и хрупких взаимосв€зей между животными и растени€ми во многом завис€т и люди.',
        year_of_publication => 2008,
        age_limit => 0,
        price => 376,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('’елен'),
        a_last_names => book_pkg.a_last_name('—кейлз'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('сборник', 'лекций', ' оролевского', 'института'),
        genres => book_pkg.genre(' онцепции современного естествознани€')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 11,
        issuer => 'ѕортал',
        title => 'Ќе приспособлен к жизни. „еловеческа€ эволюци€ против современного мира',
        summary => 'Ћюди выкованы естественным отбором и отточены эволюцией. ќни идеально приспособлены дл€ мираЕ которого больше не существует. Ќо почему же так получилось? –азъ€снит ситуацию јдам ’арт - биолог, профессор ”ниверситета √лостершира, попул€ризатор науки, соавтор научно-попул€рных фильмов BBC. ћы не адаптированы к сегодн€шней жизни по многим причинам. Ѕлагодар€ этой книге вы не только сможете пон€ть их, узнав больше об истории человечества, генетике, биогеографии, биохимии, половом отборе, психологии, социологии, но и найдете ответы на вопросы: - €вл€етс€ ли ожирение, от которого страдают миллионы людей, результатом эволюции или дело в наследственной лени? - почему в высокотехнологичном, безопасном и очень удобном современном мире мы испытываем больше стресса, чем наши первобытные предки? - как повли€ют на человечество новые технологии? - и почему, говор€ о собственном...',
        year_of_publication => 2021,
        age_limit => 0,
        price => 616,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('јдам', '’елен'),
        a_last_names => book_pkg.a_last_name('’арт', '—кейлз'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('больше', 'почему', 'выкованы', 'Ћюди'),
        genres => book_pkg.genre('ƒругие биологические науки')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 16,
        issuer => 'јркади€',
        title => '÷веточна€ сеть',
        summary => 'ѕосреди пекинской зимы, в последние дни правлени€ ƒэн —€опина, сын посла —Ўј в  итае найден мертвым: его тело погребено в замерзшем озере.ѕримерно в то же врем€ на борту корабл€ с нелегальными мигрантами, дрейфующего у берегов ёжной  алифорнии, помощник прокурора ƒэвид —тарк обнаруживает страшный груз: труп "красного принца" - наследника политической элиты  Ќ–.¬ласти обеих стран подозревают, что убийства св€заны между собой, и соглашаютс€ на беспрецедентный шаг: несмотр€ на политические разногласи€, объединить усили€ по расследованию преступлений. “еперь ƒэвиду —тарку предстоит работать вместе с Ћю ’улань - пекинской красной принцессой, инспектором ћинистерства общественной безопасности.',
        year_of_publication => 2020,
        age_limit => 18,
        price => 370,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('Ћиза', '’елен'),
        a_last_names => book_pkg.a_last_name('—и', '—кейлз'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('пекинской', 'ѕосреди', 'последние', 'зимы'),
        genres => book_pkg.genre('ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => '‘антом ѕресс',
        title => '„ерные кувшинки',
        summary => 'ƒевочка, люб€ща€ рисовать, неверо€тно красива€ школьна€ учительница и старуха, котора€ видит все... ¬ деревушке ∆иверни у реки найдено тело ребенка. Ћоренс —еренак не так давно выпустилс€ из полицейской школы, и это его первое расследование. ѕодозреваемых у него хоть отбавл€й. Ќо главное - преступление очень похоже на давнее, случившеес€ в 1937 году. ћожет, они как-то св€заны? “олько старуха с совиным взгл€дом знает это. “олько старуха знает, что истори€ может повторитьс€ и девочка, что любит рисовать, и красавица-учительница в огромной опасности..."„ерные кувшинки" - один из лучших романов ћишел€ Ѕюсси.',
        year_of_publication => 2021,
        age_limit => 18,
        price => 728,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ћишель', '’елен'),
        a_last_names => book_pkg.a_last_name('Ѕюсси', '—кейлз'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('старуха', 'ƒевочка', 'знает', 'люб€ща€'),
        genres => book_pkg.genre('ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 19,
        issuer => 'Ёксмо',
        title => ' расный дракон',
        summary => 'ћы все безумцы или, может быть, это мир вокруг нас сошел с ума? ƒоктор √аннибал Ћектер, легендарный убийца-каннибал, попав за решетку, становитс€ консультантом и союзником ‘Ѕ–. Ќесомненно, √аннибал Ћектер - мань€к, но он и философ, и блест€щий психиатр. ≈го мучает скука и отсутствие "интересных" книг в тюремной библиотеке. «айд€ в тупик в расследовании дела серийного убийцы, прозванного  расным ƒраконом, ‘Ѕ– обращаетс€ к доктору Ћектеру. ¬едь только мань€к может пон€ть мань€ка. » √аннибал Ћектер принимает предложение. ƒл€ него важно доказать, что он умнее преступника, которого ищет ‘Ѕ–.',
        year_of_publication => 2019,
        age_limit => 14,
        price => 650,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('“омас'),
        a_last_names => book_pkg.a_last_name('’аррис'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('‘Ѕ–', 'Ћектер', '√аннибал', 'мань€к'),
        genres => book_pkg.genre('ƒетективы')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'јркади€',
        title => '√омункул. ѕриключени€ Ћэнгдона —ент-»ва',
        summary => 'ƒжеймс Ѕлэйлок, знаменитый американский фантаст и лауреат множества престижных премий, положил начало движению стимпанка в литературе. ≈го роман "√омункул" - насто€ща€ жемчужина этого жанра: абсурдистска€ "черна€ комеди€", в которой атмосфера, обычаи и технологии ¬икторианской эпохи соседствуют с таинствами древней магии, загадками далекого космоса и захватывающими приключени€ми в духе ∆юл€ ¬ерна и √ерберта ”эллса. "√омункул" - первое из цикла произведений, повествующих об удивительных похождени€х профессора Ћэнгдона —ент-»ва, ученого-изобретател€, большого охотника до вс€ческих диковин и джентльмена до мозга костей. –оман Ѕлэйлока удостоен ѕремии им. ‘илипа  . ƒика. ¬первые на русском €зыке.',
        year_of_publication => 2022,
        age_limit => 10,
        price => 827,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжеймс', '“омас'),
        a_last_names => book_pkg.a_last_name('Ѕлэйлок', '’аррис'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('роман', '√омункул', 'Ѕлэйлок', 'ƒжеймс'),
        genres => book_pkg.genre('‘антастический зарубежный боевик')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 22,
        issuer => 'fanzon',
        title => '“ень',
        summary => '‘инал первой трилогии MATERIA PRIMA. „ем закончитс€ последн€€ схватка с неумолимым противником?—рок мирного договора между ¬аршавской республикой, –оссийской и √ерманской импери€ми подходит к концу. Ќовое наступление на ¬аршаву неминуемо. Ћидер  инжальщиков смертельно болен, и предсто€т выборы преемника.√раф —амарин оставил военную карьеру, но теперь вовлечен в придворные интриги. јлхимик –удницкий беретс€ расследовать ритуальные убийства и, как обычно, разматывает клубок, ведущий к ѕрокл€тым.Ѕиблейска€ легенда о нефилимах подтверждаетс€, но –удницкий и предположить не мог, что это коснетс€ и его лично."Materia Prima по-прежнему один из самых крутых сериалов в польском фэнтези за последние годы, давайте не будем забывать об этом". - taniaksiazka.pl"ƒействие стремительное, скучать невозможно". - Empic.pl"Ёто отлична€ книга, сочетающа€ в себе фэнтези, исторический ...',
        year_of_publication => 2021,
        age_limit => 13,
        price => 586,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('јдам', '“омас'),
        a_last_names => book_pkg.a_last_name('ѕшехшта', '’аррис'),
        a_father_names => book_pkg.a_father_name(' ', ' '),
        tags => book_pkg.tag('–удницкий', 'фэнтези'),
        genres => book_pkg.genre('√ероическое зарубежное фэнтези')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'Ёксмо',
        title => '„ас Ѕыка',
        summary => '"¬ "„асе Ѕыка" € представил планету, на которую переселилась группа земл€н, они повтор€ют пионерское завоевание запада јмерики, но на гораздо более высокой технической основе. Ќеимоверно ускоренный рост населени€ и капиталистическое хоз€йствование привели к истощению планеты и массовой смертности от голода и болезней. √осударственный строй на ограбленной планете, естественно, должен быть олигархическим. „тобы построить модель подобного государства, € продолжил в будущее те тенденции гангстерского фашиствующего монополизма, какие зарождаютс€ сейчас в јмерике и некоторых других странах, пытающихс€ сохранить "свободу" частного предпринимательства на густой националистической основе.  ѕон€тно, что не наука и техника отдаленного будущего или странные цивилизации безмерно далеких миров сделались целью моего романа. Ћюди будущей «емли, выращенные многовековым существова...',
        year_of_publication => 2022,
        age_limit => 3,
        price => 295,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('»ван'),
        a_last_names => book_pkg.a_last_name('≈фремов'),
        a_father_names => book_pkg.a_father_name('јнатольевич'),
        tags => book_pkg.tag('основе', '„асе', 'представил', 'Ѕыка'),
        genres => book_pkg.genre('фантастика')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 74,
        issuer => 'ј—“',
        title => 'ѕонедельник начинаетс€ в субботу',
        summary => '¬ этот том вошел знаменитый роман братьев —тругацких  Ђѕонедельник начинаетс€ в субботуї Ч буквально раздерганна€ на цитаты истори€ веселых, остроумных сотрудников таинственного института Ќ»»„ј¬ќ, где вполне всерьез занимаютс€ исследованием магии и волшебства.',
        year_of_publication => 2019,
        age_limit => 10,
        price => 467,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('јркадий'),
        a_last_names => book_pkg.a_last_name('—тругацкий'),
        a_father_names => book_pkg.a_father_name('ћаксимович'),
        tags => book_pkg.tag('вошел', 'знаменитый', 'роман', 'братьев'),
        genres => book_pkg.genre('фантастика')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => '‘еникс',
        title => 'ѕариж - всегда отлична€ иде€!',
        summary => 'Ќовый роман автора бестселлеров The New York Times ƒжен ћак инли "ѕариж - всегда отлична€ иде€!" назван лучшей книгой лета 2020 по версии Popsugar.√лавна€ героин€ книги, „елси, осознает, что последний раз была счастлива, влюблена и наслаждалась жизнью, когда жила год за границей. ¬дохновившись теплыми и радостными воспоминани€ми, „елси разыскивает  олина в »рландии, ∆ан- лода во ‘ранции и ћарчеллино в »талии в надежде, что один из этих трех мужчин, похитивших ее сердце много лет назад, на самом деле и был любовью всей ее жизни. ¬ поисках себ€ и мужчины свой мечты „елси встречаетс€ лицом к лицу со своими страхами, прощаетс€ с иллюзи€ми и наконец находит свою любовь там, где никогда бы не подумала ее искать.',
        year_of_publication => 2005,
        age_limit => 8,
        price => 845,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжен'),
        a_last_names => book_pkg.a_last_name('ћак инли'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('„елси', 'Ќовый', 'автора', 'роман'),
        genres => book_pkg.genre('—овременный сентиментальный роман')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 64,
        issuer => 'Ёксмо',
        title => '¬се твои совершенства',
        summary => 'Ћюбимый автор пользователей TikTok, более 610 миллионов упоминаний. "“рудно признать, что браку пришел конец, когда любовь еще не ушла. Ћюди привыкли считать, что брак заканчиваетс€ только с утратой любви.  огда на место счасть€ приходит злость.  Ќо мы с √рэмом не злимс€ друг на друга. ћы просто стали другими.  ћы с √рэмом так давно смотрим в противоположные стороны, что € даже не могу вспомнить, какие у него глаза, когда он внутри мен€.  «ато уверена, что он помнит, как выгл€дит каждый волосок на моем затылке, когда € отворачиваюсь от него по ночам".  —овершенной любви  уинн и √рэмма угрожает их несовершенный брак.  ќни познакомились при сложных обсто€тельствах. ƒраматичное, но красивое начало. —ейчас же близитс€ конец. „то может спасти их отношени€?   уинн уверена, что должна забеременеть. Ќо ее уверенность становитс€ и тем, что ведет их брак к концу.  —колько ...',
        year_of_publication => 2015,
        age_limit => 13,
        price => 600,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name(' олин'),
        a_last_names => book_pkg.a_last_name('√увер'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('брак', 'любви', 'уверена', '√рэмом'),
        genres => book_pkg.genre('—овременный сентиментальный роман')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'Inspiria',
        title => '√л€д€ на море',
        summary => '‘рансуаза Ѕурден - одна из ведущих авторов европейского "эмоционального романа".  ¬о ‘ранции ее книги разошлись общим тиражом более 8 млн экземпл€ров.  "Le Figaro" охарактеризовала ‘рансуазу Ѕурден как одного из шести попул€рнейших авторов страны.  ¬ мире романы ‘рансуазы представлены на 15 иностранных €зыках.     "“рогательный роман, прочно обосновавшийс€ на вершине книжных рейтингов". - France Info  "‘рансуаза Ѕурден завораживает своим писательским талантом". - L Obs  "–омантична€ оптимистка ‘рансуаза Ѕурден готова показать нам лучшее в мужчинах". - Le Parisien   Ѕольше всего на свете ћатье любит свой успешный книжный магазин, где проводит дни, а порой и ночи. ќн все сильнее отдал€етс€ от “есс, котора€, в свою очередь, больше всего на свете любит его.  ƒействие разворачиваетс€ в портовом городе, в Ќормандии, где соленый воздух свободы пропитал все улицы. “есс ...',
        year_of_publication => 2014,
        age_limit => 3,
        price => 564,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('‘рансуаза'),
        a_last_names => book_pkg.a_last_name('Ѕурден'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('Ѕурден', '‘рансуаза', 'авторов', 'больше'),
        genres => book_pkg.genre('—овременный сентиментальный роман')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 14,
        issuer => 'Inspiria',
        title => 'ѕандора',
        summary => 'ƒебютный роман британской писательницы —ьюзен —токс-„епмен Ч идеальное сочетание георгианской јнглии и греческой мифологии. ћеждународный бестселлер, права на издание выкуплены в 15 странах.  Ћондон, 1799 год. ƒора Ѕлейк, начинающа€ художница-ювелир, живет со своей ручной сорокой в лавке древностей. Ќыне место принадлежит ее д€де и находитс€ в упадке, но в былые времена магазинчик родителей ƒоры был очень известным благодар€ широкому ассортименту подлинных произведений искусства. ѕо€вление пифоса Ч загадочной древнегреческой вазы Ч и скрываемые им секреты мен€ют жизнь девушки: она видит шанс вернуть магазин и избавитьс€ от гнета д€ди. ќднако заинтересованных в пифосе оказываетс€ слишком много: кто-то благодар€ ему может проложить дорогу в академическое будущее, другой Ч потешить самолюбие, а третий Ч сполна удовлетворить жажду денег. „то за тайны скрывает древн€€ находка и к...',
        year_of_publication => 2009,
        age_limit => 15,
        price => 796,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('—ьюзен'),
        a_last_names => book_pkg.a_last_name('—токс-„епмен'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('благодар€', 'ƒебютный', 'британской', 'роман'),
        genres => book_pkg.genre('»сторический роман')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 12,
        issuer => 'Ёксмо',
        title => 'Ўоколад',
        summary => '—онное спокойствие маленького французского городка нарушено приездом молодой женщины ¬ианн и ее дочери. ќни по€вились вместе с шумным и €рким карнавальным шествием, а когда карнавал закончилс€, его светла€ радость осталась в глазах ¬ианн, открывшей здесь свой Ўоколадный магазин.  аким-то чудесным образом она узнает о сокровенных желани€х жителей городка и предлагает каждому именно такое шоколадное лакомство, которое заставл€ет его вновь почувствовать вкус к жизни."Ўоколад" - это истори€ о доброте и терпимости, о противосто€нии невинных соблазнов и закоснелой праведности. ќдноименный голливудский фильм режиссера Ћассе ’аллстрЄма (с ∆юльетт Ѕинош, ƒжонни ƒеппом и ƒжуди ƒенч в главных рол€х) был номинирован на "ќскар" в п€ти категори€х и на "«олотой глобус" - в четырех.',
        year_of_publication => 2020,
        age_limit => 15,
        price => 369,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒжоанн'),
        a_last_names => book_pkg.a_last_name('’аррис'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('городка', '¬ианн', 'спокойствие', '—онное'),
        genres => book_pkg.genre('—овременна€ зарубежна€ проза')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 16,
        issuer => 'ћанн',
        title => '»громани€',
        summary => '¬ыпуск 01.19',
        year_of_publication => 2019,
        age_limit => 3,
        price => 163,
        book_type => '∆урнал',
        a_first_names => book_pkg.a_first_name('ƒуглас'),
        a_last_names => book_pkg.a_last_name('јбрамс'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag(),
        genres => book_pkg.genre('–азвлекательна€ литература')
        );
    DBMS_OUTPUT.put_line ('--------------------');

    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 16,
        issuer => 'ћанн',
        title => 'Ѕуревестник',
        summary => '¬ыпуск 04.14',
        year_of_publication => 2014,
        age_limit => 3,
        price => 20,
        book_type => '√азета',
        a_first_names => book_pkg.a_first_name('ƒуглас'),
        a_last_names => book_pkg.a_last_name('јбрамс'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag(),
        genres => book_pkg.genre('–азвлекательна€ литература')
        );
    DBMS_OUTPUT.put_line ('--------------------');
END;
/


 -- заполн€ем таблицу рейтингов
BEGIN
    FOR I IN 0..10 LOOP
        INSERT INTO RATING (
            RATING
        ) VALUES (
            I
        );
    END LOOP;
END;
/


-- добавл€ем клиентов
DECLARE
    CLIENT_ID$                NUMBER;
BEGIN
    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'ƒина', 
        last_name => '≈вдокимова', 
        father_name => '≈всеевна', 
        birthday => TO_DATE('1/1/1980', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 0
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '¬алери€', 
        last_name => '‘адеева', 
        father_name => 'ћихаиловна', 
        birthday => TO_DATE('2/2/1982', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 1
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '«ара', 
        last_name => '≈лисеева', 
        father_name => '“имофеевна', 
        birthday => TO_DATE('3/3/1984', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 2
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'ѕолина', 
        last_name => ' ириллова', 
        father_name => '√еннадьевна', 
        birthday => TO_DATE('4/4/1986', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 3
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '»лона', 
        last_name => '—амойлова', 
        father_name => 'јльвиановна', 
        birthday => TO_DATE('5/5/1988', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 4
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '»забелла', 
        last_name => '—имонова', 
        father_name => 'Ќатановна', 
        birthday => TO_DATE('6/6/1990', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 5
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '—еверина', 
        last_name => 'ѕетрова', 
        father_name => 'ƒаниловна', 
        birthday => TO_DATE('7/7/1992', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 6
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'јвгустина', 
        last_name => 'ћаслова', 
        father_name => 'ƒавидовна', 
        birthday => TO_DATE('8/8/1994', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 7
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'ќлес€', 
        last_name => 'ќсипова', 
        father_name => 'јльвиановна', 
        birthday => TO_DATE('9/9/1996', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 8
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '¬енера', 
        last_name => '—азонова', 
        father_name => '≈вгеньевна', 
        birthday => TO_DATE('10/10/1998', 'dd/mm/yyyy'), 
        employee => 'Ѕиблиотекарь', 
        rating => 5
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'јверь€н', 
        last_name => '‘окин', 
        father_name => 'ѕЄтрович', 
        birthday => TO_DATE('11/11/2000', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 5
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '»горь', 
        last_name => 'ѕетров', 
        father_name => 'ћартынович', 
        birthday => TO_DATE('12/12/2002', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 6
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '√ерман', 
        last_name => '√аврилов', 
        father_name => 'ѕетрович', 
        birthday => TO_DATE('13/2/2004', 'dd/mm/yyyy'), 
        employee => 'Ѕиблиотекарь', 
        rating => 6
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '¬асилий', 
        last_name => '≈фимов', 
        father_name => '—ерапионович', 
        birthday => TO_DATE('14/3/2006', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 7
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => ' лим', 
        last_name => '–€бов', 
        father_name => 'ѕавлович', 
        birthday => TO_DATE('15/4/2008', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 7
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'Ћазарь', 
        last_name => 'ћаслов', 
        father_name => 'ћартынович', 
        birthday => TO_DATE('16/5/2010', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 8
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'Ѕогдан', 
        last_name => '—околов', 
        father_name => 'ярославович', 
        birthday => TO_DATE('17/6/2012', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 8
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'Ѕолеслав', 
        last_name => 'Ћапин', 
        father_name => 'Ћеонидович', 
        birthday => TO_DATE('18/7/2014', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 9
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => 'ќстап', 
        last_name => ' арпов', 
        father_name => '’ристофорович', 
        birthday => TO_DATE('19/8/2016', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 9
        );
    DBMS_OUTPUT.put_line ('--------------------');

    CLIENT_ID$ := client_pkg.create_client(
        first_name => '—авелий', 
        last_name => '—еливерстов', 
        father_name => 'ћэлорович', 
        birthday => TO_DATE('20/9/2018', 'dd/mm/yyyy'), 
        employee => '', 
        rating => 10
        );
    DBMS_OUTPUT.put_line ('--------------------');
END;
/


-- «аполн€ем журнал выдачи-возрата книг напр€мую, т.к. нужен учебный материл дл€ запросов с разными датами,
-- дл€ действительной выдачи создана функци€ book_pkg.get_book(), записывает sysdate в врем€ выдачи и производит проверки 
BEGIN
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/28', 'yyyy/mm/dd'),
        10,
        20,
        11);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/7/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/7/12', 'yyyy/mm/dd'),
        7,
        6,
        397);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/16', 'yyyy/mm/dd'),
        3,
        18,
        139);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/17', 'yyyy/mm/dd'),
        4,
        18,
        130);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/10/01', 'yyyy/mm/dd'), 
        9,
        455);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 455;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/19', 'yyyy/mm/dd'),
        3,
        2,
        504);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/8', 'yyyy/mm/dd'),
        6,
        13,
        170);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        18,
        87);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 87;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/3/19', 'yyyy/mm/dd'),
        10,
        13,
        337);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/25', 'yyyy/mm/dd'),
        3,
        8,
        505);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        7,
        505);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 505;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/10/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/10/9', 'yyyy/mm/dd'),
        9,
        5,
        387);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/4/01', 'yyyy/mm/dd'), 
        14,
        280);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 280;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/9/24', 'yyyy/mm/dd'),
        5,
        18,
        481);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        2,
        70);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 70;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        9,
        270);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 270;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/4/01', 'yyyy/mm/dd'), 
        2,
        285);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 285;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/5', 'yyyy/mm/dd'),
        5,
        12,
        176);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/10/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/10/16', 'yyyy/mm/dd'),
        2,
        16,
        63);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        11,
        60);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 60;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/22', 'yyyy/mm/dd'),
        7,
        7,
        540);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/11', 'yyyy/mm/dd'),
        6,
        14,
        150);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/19', 'yyyy/mm/dd'),
        7,
        14,
        500);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/7/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/7/3', 'yyyy/mm/dd'),
        5,
        3,
        336);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/4/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/4/11', 'yyyy/mm/dd'),
        2,
        19,
        463);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/18', 'yyyy/mm/dd'),
        7,
        19,
        171);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        15,
        421);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 421;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/10/01', 'yyyy/mm/dd'), 
        7,
        316);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 316;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/3/8', 'yyyy/mm/dd'),
        7,
        18,
        519);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/8/14', 'yyyy/mm/dd'),
        10,
        14,
        390);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/8/28', 'yyyy/mm/dd'),
        2,
        8,
        151);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/7', 'yyyy/mm/dd'),
        9,
        4,
        355);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/24', 'yyyy/mm/dd'),
        2,
        9,
        453);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/11', 'yyyy/mm/dd'),
        6,
        6,
        152);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/7/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/7/18', 'yyyy/mm/dd'),
        2,
        18,
        55);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/23', 'yyyy/mm/dd'),
        9,
        6,
        187);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/3', 'yyyy/mm/dd'),
        3,
        3,
        209);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        8,
        98);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 98;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/26', 'yyyy/mm/dd'),
        3,
        20,
        514);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/13', 'yyyy/mm/dd'),
        3,
        11,
        63);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/8/17', 'yyyy/mm/dd'),
        10,
        10,
        558);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/16', 'yyyy/mm/dd'),
        5,
        13,
        320);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/25', 'yyyy/mm/dd'),
        10,
        9,
        420);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/9/29', 'yyyy/mm/dd'),
        2,
        19,
        147);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/24', 'yyyy/mm/dd'),
        9,
        19,
        40);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/4', 'yyyy/mm/dd'),
        6,
        18,
        381);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/7/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/7/25', 'yyyy/mm/dd'),
        5,
        2,
        244);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        12,
        461);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 461;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/9/16', 'yyyy/mm/dd'),
        10,
        2,
        339);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/4/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/4/29', 'yyyy/mm/dd'),
        2,
        9,
        90);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/20', 'yyyy/mm/dd'),
        10,
        14,
        471);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/8/18', 'yyyy/mm/dd'),
        2,
        2,
        23);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/3/14', 'yyyy/mm/dd'),
        9,
        12,
        381);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/23', 'yyyy/mm/dd'),
        2,
        19,
        290);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        4,
        228);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 228;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/12/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/12/23', 'yyyy/mm/dd'),
        1,
        6,
        377);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        18,
        549);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 549;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/9/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/9/9', 'yyyy/mm/dd'),
        5,
        6,
        51);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/20', 'yyyy/mm/dd'),
        3,
        18,
        92);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        11,
        91);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 91;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/8/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/8/13', 'yyyy/mm/dd'),
        4,
        20,
        344);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/11/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/11/18', 'yyyy/mm/dd'),
        10,
        19,
        468);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/24', 'yyyy/mm/dd'),
        2,
        12,
        560);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/6/28', 'yyyy/mm/dd'),
        2,
        15,
        405);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/3/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/3/15', 'yyyy/mm/dd'),
        7,
        16,
        371);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/22', 'yyyy/mm/dd'),
        3,
        20,
        414);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/4/01', 'yyyy/mm/dd'), 
        13,
        10);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 10;

    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/5/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/5/23', 'yyyy/mm/dd'),
        7,
        4,
        366);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        RETURN_BOOK, 
        RATING_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/2/01', 'yyyy/mm/dd'), 
        TO_DATE('2022/2/9', 'yyyy/mm/dd'),
        5,
        3,
        95);
    
    INSERT INTO LOG_DELIVERY_RETURN_BOOK (
        TAKE_BOOK, 
        ID_CLIENT, 
        ID_EXEMPLAR
    ) VALUES (
        TO_DATE('2022/6/01', 'yyyy/mm/dd'), 
        10,
        158);
    --мен€ем местоположение экземпл€ра
    UPDATE EXEMPLAR
    SET 
        ON_HOME = 1,
        ON_STORE = 0
    WHERE ID = 158;
END;
/


-- сложные запросы
-- 1.Ќаписать запрос поиска всех книг заданного автора (вывести наименование книг, жанра, возрастное ограничение и ‘»ќ автора)
SELECT 
    TITLE, 
    LISTAGG(DISTINCT GENRE, '; ') AS GENRES, 
    LISTAGG(DISTINCT AGE_LIMIT, '; ') AS AGE_LIMITS, 
    FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME AS FIO
FROM AUTHOR A 
    LEFT JOIN AUTHOR_WROTE_BOOK AWB
        ON (A.ID = AWB.ID_AUTHOR)
    LEFT JOIN BOOK B
        ON (B.ID =AWB.ID_BOOK)
    LEFT JOIN BOOK_HAVE_GENRE BHG
        ON (B.ID = BHG.ID_BOOK)
    LEFT JOIN GENRE G
        ON (BHG.ID_GENRE = G.ID)
WHERE A.LAST_NAME = 'јбрамс'
GROUP BY TITLE, FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME;
/

-- 2.Ќаписать запрос поиска всех книг изданных определенным издательством (позже/ранее заданной даты - вывести наименование книг, жанра, возрастное ограничение, ‘»ќ автора и издательство)
SELECT 
    B.TITLE, 
    LISTAGG(G.GENRE, '; ') AS GENRES, 
    B.AGE_LIMIT, 
    LISTAGG(A.FIRST_NAME||' '||A.LAST_NAME||' '||A.FATHER_NAME, '; ') AS AUTHORS, 
    PUBLISHER
FROM PUBLISHER P
    JOIN BOOK B
        ON B.ID_PUBLISHER = P.ID
    LEFT JOIN AUTHOR_WROTE_BOOK AWB
        ON B.ID = AWB.ID_BOOK
    LEFT JOIN AUTHOR A 
        ON A.ID = AWB.ID_AUTHOR
    LEFT JOIN BOOK_HAVE_GENRE BHG
        ON B.ID = BHG.ID_BOOK
    LEFT JOIN GENRE G
        ON BHG.ID_GENRE = G.ID
WHERE P.PUBLISHER = 'ћанн' AND B.YEAR_OF_PUBLICATION > 2000
GROUP BY TITLE, AGE_LIMIT, PUBLISHER;
/

-- 3.Ќайти книги по заданным критери€м (по жанру, по тегам, по автору, по ограничению)
SELECT 
    B.TITLE, 
    LISTAGG(G.GENRE, '; ') AS GENRES, 
    LISTAGG(B.AGE_LIMIT, '; ') AS AGE_LIMITS, 
    LISTAGG(DISTINCT T.TAG, ', ') AS TAGS, 
    LISTAGG(DISTINCT A.FIRST_NAME||' '||A.LAST_NAME||' '||A.FATHER_NAME, '; ') AS AUTHOR
FROM BOOK_HAVE_TAG BHT 
    JOIN BOOK B 
        ON (B.ID = BHT.ID_BOOK)
    LEFT JOIN BOOK_HAVE_GENRE BHG 
        ON (B.ID = BHG.ID_BOOK)
    LEFT JOIN TAG T 
        ON (T.ID = BHT.ID_TAG)
    LEFT JOIN GENRE G 
        ON (BHG.ID_GENRE = G.ID)
    LEFT JOIN AUTHOR_WROTE_BOOK AWB 
        ON (AWB.ID_BOOK = B.ID)
    LEFT JOIN AUTHOR A 
        ON (A.ID = AWB.ID_AUTHOR)
WHERE A.LAST_NAME = 'ќруэлл'
    AND B.AGE_LIMIT < 20
    AND T.TAG = 'общество'
GROUP BY TITLE;
/

-- 4.Ќайти “ќѕ 5 самых попул€рных книг (по кол-ву выдачи)
SELECT *
FROM (
    SELECT 
        TITLE, 
        COUNT(B.ID) AS "¬ыдано раз",
        RANK() OVER (ORDER BY (COUNT(B.ID)) DESC) AS rank
    FROM BOOK B
        JOIN EXEMPLAR E
            ON E.ID_BOOK = B.ID 
        JOIN LOG_DELIVERY_RETURN_BOOK DRB 
            ON E.ID = DRB.ID_EXEMPLAR
    GROUP BY TITLE)
WHERE rank <= 5;
/

-- 5.Ќайти “ќѕ 5 самых читающих пользователей (за заданный период)
SELECT *
    FROM (
    SELECT 
        LAST_NAME||' '||FIRST_NAME||' '||FATHER_NAME AS CLIENT, 
        COUNT(C.ID) AS "„итал(a) раз",
        RANK() OVER (ORDER BY (COUNT(C.ID)) DESC) AS rank
    FROM CLIENT C 
        JOIN LOG_DELIVERY_RETURN_BOOK DRB 
            ON (C.ID = DRB.ID_CLIENT)
    WHERE DRB.TAKE_BOOK BETWEEN TO_DATE('2022/5/01', 'yyyy/mm/dd') AND TO_DATE('2022/8/01', 'yyyy/mm/dd')
    GROUP BY LAST_NAME||' '||FIRST_NAME||' '||FATHER_NAME)
WHERE rank <= 5;
/

-- 6.Ќайти список книг которые не могут быть выданы читателю домой 
    SELECT 
    TITLE, 
    LISTAGG(DISTINCT FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR, 
    PUBLISHER,
    COUNT(B.ID) AS "ќсталось на складе"
FROM EXEMPLAR E 
    JOIN BOOK B 
        ON (B.ID = E.ID_BOOK)
    JOIN AUTHOR_WROTE_BOOK AWB 
        ON (AWB.ID_BOOK = B.ID)
    JOIN AUTHOR A 
        ON(A.ID = AWB.ID_AUTHOR)
    JOIN PUBLISHER P 
        ON (P.ID = B.ID_PUBLISHER)
WHERE E.ON_STORE = 1 AND
EXTRACT(YEAR FROM SYSDATE)-EXTRACT(YEAR FROM(SELECT
                BIRTHDAY
                FROM CLIENT
                WHERE CLIENT.ID = 10)) <= B.AGE_LIMIT -- не выдаетс€ по возрастному цензу
    OR (SELECT 
            RATING
        FROM CLIENT
    WHERE ID = 10) = 0 -- не выдаетс€ с рейтингом 0
GROUP BY TITLE, PUBLISHER
UNION
SELECT *
    FROM(
    SELECT 
    TITLE, 
    LISTAGG(DISTINCT FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR, 
    PUBLISHER,
    COUNT(B.ID) AS "ќсталось на складе"
FROM EXEMPLAR E 
    JOIN BOOK B 
        ON (B.ID = E.ID_BOOK)
    JOIN AUTHOR_WROTE_BOOK AWB 
        ON (AWB.ID_BOOK = B.ID)
    JOIN AUTHOR A 
        ON(A.ID = AWB.ID_AUTHOR)
    JOIN PUBLISHER P 
        ON (P.ID = B.ID_PUBLISHER)
WHERE E.ON_STORE = 1 
GROUP BY TITLE, PUBLISHER)
WHERE "ќсталось на складе" <= 1;
/

-- 7.«апрос который покажет может ли читатель почитать/получить желаемую книгу
-- Ќельз€ вз€ть последнюю книгу, нельз€ вз€ть книгу если должен сдать другую и просрочен срок сдачи, нельз€ вз€ть книгу и почитать если в черном списке(рейтинг=0)
SELECT 
    TITLE, 
    LISTAGG(DISTINCT FIRST_NAME||' '||LAST_NAME||' '||FATHER_NAME, '; ') AS AUTHOR, 
    PUBLISHER,
    CASE WHEN ((SELECT
                    COUNT(TITLE)
                FROM EXEMPLAR E
                    JOIN BOOK B
                        ON B.ID = E.ID_BOOK
                WHERE TITLE = '¬се твои совершенства' 
                    AND ON_STORE = 1) > 1 -- если книга не последн€€
            AND (SELECT 
                    COUNT(TITLE)
                FROM LOG_DELIVERY_RETURN_BOOK DRB
                    JOIN CLIENT C 
                        ON (C.ID = DRB.ID_CLIENT)
                    JOIN EXEMPLAR E
                        ON E.ID = DRB.ID_EXEMPLAR
                    JOIN BOOK B
                        ON (B.ID = E.ID_BOOK)
                WHERE DRB.RETURN_BOOK IS NULL
                    AND C.ID = 10
                    AND B.TITLE = '¬се твои совершенства') = 0 -- если еще не вз€л эту книгу
            AND (SELECT
                    RATING
                FROM CLIENT C
                WHERE C.ID = 10) != 0 -- если рейтинг != 0
            AND (SELECT
                    AGE_LIMIT
                FROM BOOK B
                WHERE B.TITLE = '¬се твои совершенства') <= (
                    EXTRACT(
                        YEAR
                    FROM
                        SYSDATE
                    ) - EXTRACT(
                        YEAR
                    FROM
                        (SELECT
                        BIRTHDAY
                        FROM CLIENT
                        WHERE ID = 10))) -- если проходишь возрастной ценз
    )
        THEN 'YES' 
        ELSE 'NO' 
    END ћожно_вз€ть_домой
FROM BOOK B 
    JOIN AUTHOR_WROTE_BOOK AWB 
        ON (AWB.ID_BOOK = B.ID)
    JOIN AUTHOR A 
        ON(A.ID = AWB.ID_AUTHOR)
    JOIN PUBLISHER P 
        ON (P.ID = B.ID_PUBLISHER) 
    JOIN EXEMPLAR E
        ON E.ID_BOOK = B.ID
WHERE TITLE = '¬се твои совершенства'
GROUP BY TITLE, PUBLISHER;
/

-- 8.¬ывести список просроченных книг и их держателей со сроком просрочки
SELECT 
    TITLE, 
    LISTAGG(A.FIRST_NAME||' '||A.LAST_NAME||' '||A.FATHER_NAME, '; ') AS AUTHORS, 
    PUBLISHER, 
    C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME AS CLIENT, 
    ROUND(SYSDATE - DRB.TAKE_BOOK - 14)  AS OVERDUE_DAYS
FROM LOG_DELIVERY_RETURN_BOOK DRB
    JOIN EXEMPLAR E
        ON E.ID = DRB.ID_EXEMPLAR
    JOIN BOOK B 
        ON (B.ID = E.ID_BOOK)
    LEFT JOIN AUTHOR_WROTE_BOOK AWB 
        ON (AWB.ID_BOOK = B.ID)
    LEFT JOIN AUTHOR A 
        ON(A.ID = AWB.ID_AUTHOR)
    LEFT JOIN PUBLISHER P 
        ON (P.ID = B.ID_PUBLISHER) 
    JOIN CLIENT C 
        ON (C.ID = DRB.ID_CLIENT)
WHERE DRB.RETURN_BOOK IS NULL 
    AND ROUND(SYSDATE - DRB.TAKE_BOOK) > 14
GROUP BY TITLE, PUBLISHER, SYSDATE - DRB.TAKE_BOOK, C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME;
/

-- 9.¬ывести список неблагонадежных читателей (если больше 2х просрочек)
SELECT C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME AS CLIENT, 
    COUNT (C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME) AS Ќј–”Ў≈Ќ»я
FROM LOG_DELIVERY_RETURN_BOOK DRB 
    JOIN CLIENT C 
        ON (C.ID = DRB.ID_CLIENT)
WHERE DRB.RETURN_BOOK IS NULL 
    AND ROUND(SYSDATE - DRB.TAKE_BOOK) > 14
    OR ROUND(DRB.RETURN_BOOK - DRB.TAKE_BOOK) > 14
GROUP BY C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME, RATING
HAVING COUNT (C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME) > 2;
/

-- 10.Ќайти книгу похожую на ранее прочитанную
SELECT  
    C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME AS CLIENT, 
    B.TITLE AS "ѕќ—Ћ≈ƒЌяя ѕ–ќ„»“јЌЌјя",  
    B2.TITLE AS "–≈ ќћ≈Ќƒј÷»я"
FROM LOG_DELIVERY_RETURN_BOOK DRB 
    JOIN CLIENT C 
        ON C.ID = DRB.ID_CLIENT
    JOIN EXEMPLAR E
        ON E.ID = DRB.ID_EXEMPLAR
    JOIN BOOK B 
        ON B.ID = E.ID_BOOK
    JOIN BOOK_HAVE_TAG BHT
        ON B.ID = BHT.ID_BOOK,
    BOOK B2
    JOIN BOOK_HAVE_TAG BHT2
        ON B2.ID = BHT2.ID_BOOK
WHERE DRB.TAKE_BOOK = (
                SELECT 
                    MAX(TAKE_BOOK) 
                FROM LOG_DELIVERY_RETURN_BOOK DRB2 
                WHERE DRB.ID_CLIENT = DRB2.ID_CLIENT
                ) 
    AND B.TITLE <> B2.TITLE
    AND C.ID = 7
    AND BHT.ID_TAG = BHT2.ID_TAG
GROUP BY C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME, B.TITLE, B2.TITLE
ORDER BY C.FIRST_NAME||' '||C.LAST_NAME||' '||C.FATHER_NAME
FETCH FIRST 1 ROWS ONLY;
/


--вызов пакетных процедур и функций
DECLARE
    CLIENT_ID$              NUMBER;
    BOOK_ID$                NUMBER;
    DELIVERY_EXEMPLAR_ID$   NUMBER;
BEGIN
-- добавление клиента
    CLIENT_ID$ := client_pkg.create_client(
            first_name => '»м€', 
            last_name => '‘амили€', 
            father_name => 'ќтчество', 
            birthday => TO_DATE('1/1/1980', 'dd/mm/yyyy'), 
            employee => '', 
            rating => 5
            );
    DBMS_OUTPUT.put_line ('--------------------');

--добавление книги
    BOOK_ID$ := book_pkg.create_book(
        amount_books  => 5,
        issuer => '»здательство',
        title => 'Ќазвание',
        summary => '—одержание',
        year_of_publication => 2022,
        age_limit => 13,
        price => 1638,
        book_type => ' нига',
        a_first_names => book_pkg.a_first_name('ƒуглас'),
        a_last_names => book_pkg.a_last_name('јбрамс'),
        a_father_names => book_pkg.a_father_name(' '),
        tags => book_pkg.tag('человека'),
        genres => book_pkg.genre('∆анр')
        );
    DBMS_OUTPUT.put_line ('--------------------');

--выдача книги
    DELIVERY_EXEMPLAR_ID$ := book_pkg.get_book(
        id_client$ => 11,
        title$ => 'Ќазвание',
        issuer$ => '»здательство'
    );
    DBMS_OUTPUT.put_line ('--------------------');

--возврат книги
    book_pkg.return_book(
        id_client$ => 11,
        title$ => 'Ќазвание',
        publisher$ => '»здательство',
        rate_from_client$ => 5
    );
    DBMS_OUTPUT.put_line ('--------------------'); 

--получение отчета о выданных книгах за день
    report_pkg.took_books_a_day_json(
        p_day => TO_DATE('1/12/2022', 'dd/mm/yyyy')
        );
    DBMS_OUTPUT.put_line ('--------------------'); 

--получение отчета о возвращенных книгах за день
    report_pkg.return_books_a_day(
        p_day => TO_DATE('15/3/2022', 'dd/mm/yyyy')
    );
    DBMS_OUTPUT.put_line ('--------------------'); 

--получение отчета об инвентаризации
    report_pkg.inventory();
    DBMS_OUTPUT.put_line ('--------------------'); 

--получение истории одного экземпл€ра
    report_pkg.inventory_of_one(
        p_id_exemplar => 337
    );
    DBMS_OUTPUT.put_line ('--------------------'); 

END;

